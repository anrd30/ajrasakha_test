/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "http://localhost:4000";
const MAX_ARRAY_LENGTH = 20;

// Map to store counters for each API endpoint
const apiCounters = new Map();

const next = (apiKey) => {
  let currentCount = apiCounters.get(apiKey) ?? 0;
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0;
  }
  apiCounters.set(apiKey, currentCount + 1);
  return currentCount;
};

export const handlers = [
  http.post(
    `${baseURL}/api/notifications/invite/courses/:courseId/versions/:versionId`,
    async () => {
      const resultArray = [
        [getInviteControllerInviteUsers200Response(), { status: 200 }],
        [getInviteControllerInviteUsers400Response(), { status: 400 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/notifications/invite/courses/:courseId/versions/:versionId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/api/notifications/invite/courses/:courseId/versions/:versionId`,
    async () => {
      const resultArray = [
        [
          getInviteControllerGetInvitesForCourseVersion200Response(),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `get /api/notifications/invite/courses/:courseId/versions/:versionId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/api/notifications/invite/:inviteId`, async () => {
    const resultArray = [
      [getInviteControllerProcessInvites200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/notifications/invite/:inviteId`) % resultArray.length
      ],
    );
  }),
  http.post(
    `${baseURL}/api/notifications/invite/resend/:inviteId`,
    async () => {
      const resultArray = [
        [getInviteControllerResendInvite200Response(), { status: 200 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /api/notifications/invite/resend/:inviteId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/notifications/invite/cancel/:inviteId`,
    async () => {
      const resultArray = [
        [getInviteControllerCancelInvite200Response(), { status: 200 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /api/notifications/invite/cancel/:inviteId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/users/:userId/enrollments/courses/:courseId/versions/:versionId`,
    async () => {
      const resultArray = [
        [getEnrollmentControllerEnrollUser200Response(), { status: 200 }],
        [getEnrollmentControllerEnrollUser400Response(), { status: 400 }],
        [getEnrollmentControllerEnrollUser404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/users/:userId/enrollments/courses/:courseId/versions/:versionId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/api/users/:userId/enrollments/courses/:courseId/versions/:versionId`,
    async () => {
      const resultArray = [
        [getEnrollmentControllerGetEnrollment200Response(), { status: 200 }],
        [getEnrollmentControllerGetEnrollment404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `get /api/users/:userId/enrollments/courses/:courseId/versions/:versionId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/users/:userId/enrollments/courses/:courseId/versions/:versionId/unenroll`,
    async () => {
      const resultArray = [
        [getEnrollmentControllerUnenrollUser200Response(), { status: 200 }],
        [getEnrollmentControllerUnenrollUser404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/users/:userId/enrollments/courses/:courseId/versions/:versionId/unenroll`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/api/users/enrollments`, async () => {
    const resultArray = [
      [getEnrollmentControllerGetUserEnrollments200Response(), { status: 200 }],
      [getEnrollmentControllerGetUserEnrollments400Response(), { status: 400 }],
      [getEnrollmentControllerGetUserEnrollments404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /api/users/enrollments`) % resultArray.length],
    );
  }),
  http.get(
    `${baseURL}/api/users/enrollments/courses/:courseId/versions/:versionId`,
    async () => {
      const resultArray = [
        [
          getEnrollmentControllerGetCourseVersionEnrollments200Response(),
          { status: 200 },
        ],
        [
          getEnrollmentControllerGetCourseVersionEnrollments400Response(),
          { status: 400 },
        ],
        [
          getEnrollmentControllerGetCourseVersionEnrollments404Response(),
          { status: 404 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `get /api/users/enrollments/courses/:courseId/versions/:versionId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/api/users/progress/courses/:courseId/versions/:versionId/`,
    async () => {
      const resultArray = [
        [getProgressControllerGetUserProgress200Response(), { status: 200 }],
        [getProgressControllerGetUserProgress404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `get /api/users/progress/courses/:courseId/versions/:versionId/`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/api/users/progress/courses/:courseId/versions/:versionId/percentage`,
    async () => {
      const resultArray = [
        [
          getProgressControllerGetUserProgressPercentage200Response(),
          { status: 200 },
        ],
        [
          getProgressControllerGetUserProgressPercentage404Response(),
          { status: 404 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `get /api/users/progress/courses/:courseId/versions/:versionId/percentage`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/users/progress/courses/:courseId/versions/:versionId/start`,
    async () => {
      const resultArray = [
        [getProgressControllerStartItem200Response(), { status: 200 }],
        [getProgressControllerStartItem400Response(), { status: 400 }],
        [getProgressControllerStartItem404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/users/progress/courses/:courseId/versions/:versionId/start`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/users/progress/courses/:courseId/versions/:versionId/stop`,
    async () => {
      const resultArray = [
        [getProgressControllerStopItem200Response(), { status: 200 }],
        [getProgressControllerStopItem400Response(), { status: 400 }],
        [getProgressControllerStopItem404Response(), { status: 404 }],
        [getProgressControllerStopItem500Response(), { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/users/progress/courses/:courseId/versions/:versionId/stop`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.patch(
    `${baseURL}/api/users/:userId/progress/courses/:courseId/versions/:courseVersionId/update`,
    async () => {
      const resultArray = [
        [getProgressControllerUpdateProgress200Response(), { status: 200 }],
        [getProgressControllerUpdateProgress400Response(), { status: 400 }],
        [getProgressControllerUpdateProgress404Response(), { status: 404 }],
        [getProgressControllerUpdateProgress500Response(), { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `patch /api/users/:userId/progress/courses/:courseId/versions/:courseVersionId/update`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.patch(
    `${baseURL}/api/users/:userId/progress/courses/:courseId/versions/:versionId/reset`,
    async () => {
      const resultArray = [
        [getProgressControllerResetProgress200Response(), { status: 200 }],
        [getProgressControllerResetProgress404Response(), { status: 404 }],
        [getProgressControllerResetProgress500Response(), { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `patch /api/users/:userId/progress/courses/:courseId/versions/:versionId/reset`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/api/users/:userId/watchTime/item/:itemId/`, async () => {
    const resultArray = [
      [getProgressControllerGetWatchTime200Response(), { status: 200 }],
      [getProgressControllerGetWatchTime404Response(), { status: 404 }],
      [getProgressControllerGetWatchTime500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/users/:userId/watchTime/item/:itemId/`) %
          resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/users/:userId`, async () => {
    const resultArray = [
      [getUserControllerGetUserById200Response(), { status: 200 }],
      [getUserControllerGetUserById404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /api/users/:userId`) % resultArray.length],
    );
  }),
  http.patch(`${baseURL}/api/users/edit`, async () => {
    const resultArray = [
      [getUserControllerEditUser200Response(), { status: 200 }],
      [getUserControllerEditUser404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`patch /api/users/edit`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/users/make-admin/:userId`, async () => {
    const resultArray = [
      [getUserControllerMakeAdmin200Response(), { status: 200 }],
      [getUserControllerMakeAdmin404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/users/make-admin/:userId`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/auth/signup`, async () => {
    const resultArray = [
      [getAuthControllerSignup201Response(), { status: 201 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /api/auth/signup`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/auth/signup/google`, async () => {
    const resultArray = [
      [getAuthControllerGoogleSignup201Response(), { status: 201 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /api/auth/signup/google`) % resultArray.length],
    );
  }),
  http.patch(`${baseURL}/api/auth/change-password`, async () => {
    const resultArray = [
      [getAuthControllerChangePassword200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`patch /api/auth/change-password`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/auth/login`, async () => {
    const resultArray = [
      [getAuthControllerLogin200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /api/auth/login`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/courses/`, async () => {
    const resultArray = [
      [getCourseControllerCreate201Response(), { status: 201 }],
      [getCourseControllerCreate400Response(), { status: 400 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /api/courses/`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/courses/:courseId`, async () => {
    const resultArray = [
      [getCourseControllerRead200Response(), { status: 200 }],
      [getCourseControllerRead400Response(), { status: 400 }],
      [getCourseControllerRead404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /api/courses/:courseId`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/api/courses/:courseId`, async () => {
    const resultArray = [
      [getCourseControllerUpdate200Response(), { status: 200 }],
      [getCourseControllerUpdate400Response(), { status: 400 }],
      [getCourseControllerUpdate404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /api/courses/:courseId`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/api/courses/:courseId`, async () => {
    const resultArray = [
      [getCourseControllerDelete200Response(), { status: 200 }],
      [getCourseControllerDelete400Response(), { status: 400 }],
      [getCourseControllerDelete404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`delete /api/courses/:courseId`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/courses/:courseId/versions`, async () => {
    const resultArray = [
      [getCourseVersionControllerCreate201Response(), { status: 201 }],
      [getCourseVersionControllerCreate400Response(), { status: 400 }],
      [getCourseVersionControllerCreate404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/courses/:courseId/versions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/courses/versions/:id`, async () => {
    const resultArray = [
      [getCourseVersionControllerRead200Response(), { status: 200 }],
      [getCourseVersionControllerRead400Response(), { status: 400 }],
      [getCourseVersionControllerRead404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/courses/versions/:id`) % resultArray.length
      ],
    );
  }),
  http.delete(
    `${baseURL}/api/courses/:courseId/versions/:versionId`,
    async () => {
      const resultArray = [
        [getCourseVersionControllerDelete200Response(), { status: 200 }],
        [getCourseVersionControllerDelete400Response(), { status: 400 }],
        [getCourseVersionControllerDelete404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`delete /api/courses/:courseId/versions/:versionId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items`,
    async () => {
      const resultArray = [
        [getItemControllerCreate201Response(), { status: 201 }],
        [getItemControllerCreate400Response(), { status: 400 }],
        [getItemControllerCreate404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items`,
    async () => {
      const resultArray = [
        [getItemControllerReadAll200Response(), { status: 200 }],
        [getItemControllerReadAll400Response(), { status: 400 }],
        [getItemControllerReadAll404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `get /api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.put(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items/:itemId`,
    async () => {
      const resultArray = [
        [getItemControllerUpdate200Response(), { status: 200 }],
        [getItemControllerUpdate400Response(), { status: 400 }],
        [getItemControllerUpdate404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `put /api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items/:itemId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.delete(
    `${baseURL}/api/courses/itemGroups/:itemsGroupId/items/:itemId`,
    async () => {
      const resultArray = [
        [getItemControllerDelete200Response(), { status: 200 }],
        [getItemControllerDelete400Response(), { status: 400 }],
        [getItemControllerDelete404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`delete /api/courses/itemGroups/:itemsGroupId/items/:itemId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.put(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items/:itemId/move`,
    async () => {
      const resultArray = [
        [getItemControllerMove200Response(), { status: 200 }],
        [getItemControllerMove400Response(), { status: 400 }],
        [getItemControllerMove404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `put /api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/items/:itemId/move`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/api/courses/:courseId/versions/:versionId/item/:itemId`,
    async () => {
      const resultArray = [
        [getItemControllerGetItem201Response(), { status: 201 }],
        [getItemControllerGetItem400Response(), { status: 400 }],
        [getItemControllerGetItem404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`get /api/courses/:courseId/versions/:versionId/item/:itemId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/api/courses/versions/:versionId/modules`, async () => {
    const resultArray = [
      [getModuleControllerCreate201Response(), { status: 201 }],
      [getModuleControllerCreate400Response(), { status: 400 }],
      [getModuleControllerCreate404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/courses/versions/:versionId/modules`) %
          resultArray.length
      ],
    );
  }),
  http.put(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId`,
    async () => {
      const resultArray = [
        [getModuleControllerUpdate200Response(), { status: 200 }],
        [getModuleControllerUpdate400Response(), { status: 400 }],
        [getModuleControllerUpdate404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`put /api/courses/versions/:versionId/modules/:moduleId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.delete(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId`,
    async () => {
      const resultArray = [
        [getModuleControllerDelete200Response(), { status: 200 }],
        [getModuleControllerDelete400Response(), { status: 400 }],
        [getModuleControllerDelete404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`delete /api/courses/versions/:versionId/modules/:moduleId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.put(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/move`,
    async () => {
      const resultArray = [
        [getModuleControllerMove200Response(), { status: 200 }],
        [getModuleControllerMove400Response(), { status: 400 }],
        [getModuleControllerMove404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`put /api/courses/versions/:versionId/modules/:moduleId/move`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections`,
    async () => {
      const resultArray = [
        [getSectionControllerCreate201Response(), { status: 201 }],
        [getSectionControllerCreate400Response(), { status: 400 }],
        [getSectionControllerCreate404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/courses/versions/:versionId/modules/:moduleId/sections`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.put(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId`,
    async () => {
      const resultArray = [
        [getSectionControllerUpdate200Response(), { status: 200 }],
        [getSectionControllerUpdate400Response(), { status: 400 }],
        [getSectionControllerUpdate404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `put /api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.delete(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId`,
    async () => {
      const resultArray = [
        [getSectionControllerDelete200Response(), { status: 200 }],
        [getSectionControllerDelete400Response(), { status: 400 }],
        [getSectionControllerDelete404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `delete /api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.put(
    `${baseURL}/api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/move`,
    async () => {
      const resultArray = [
        [getSectionControllerMove200Response(), { status: 200 }],
        [getSectionControllerMove400Response(), { status: 400 }],
        [getSectionControllerMove404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `put /api/courses/versions/:versionId/modules/:moduleId/sections/:sectionId/move`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/api/quizzes/questions/`, async () => {
    const resultArray = [
      [getQuestionControllerCreate201Response(), { status: 201 }],
      [getQuestionControllerCreate400Response(), { status: 400 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /api/quizzes/questions/`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/quizzes/questions/:questionId`, async () => {
    const resultArray = [
      [getQuestionControllerGetById200Response(), { status: 200 }],
      [getQuestionControllerGetById400Response(), { status: 400 }],
      [getQuestionControllerGetById404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/questions/:questionId`) % resultArray.length
      ],
    );
  }),
  http.put(`${baseURL}/api/quizzes/questions/:questionId`, async () => {
    const resultArray = [
      [getQuestionControllerUpdate200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`put /api/quizzes/questions/:questionId`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/api/quizzes/questions/:questionId`, async () => {
    const resultArray = [
      [getQuestionControllerDelete200Response(), { status: 200 }],
      [getQuestionControllerDelete400Response(), { status: 400 }],
      [getQuestionControllerDelete404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`delete /api/quizzes/questions/:questionId`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/quizzes/questions/:questionId/flag`, async () => {
    const resultArray = [
      [getQuestionControllerFlagQuestion200Response(), { status: 200 }],
      [getQuestionControllerFlagQuestion400Response(), { status: 400 }],
      [getQuestionControllerFlagQuestion403Response(), { status: 403 }],
      [getQuestionControllerFlagQuestion404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/quizzes/questions/:questionId/flag`) %
          resultArray.length
      ],
    );
  }),
  http.post(
    `${baseURL}/api/quizzes/questions/flags/:flagId/resolve`,
    async () => {
      const resultArray = [
        [getQuestionControllerResolveFlag200Response(), { status: 200 }],
        [getQuestionControllerResolveFlag400Response(), { status: 400 }],
        [getQuestionControllerResolveFlag403Response(), { status: 403 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /api/quizzes/questions/flags/:flagId/resolve`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/api/quizzes/quiz/:quizId/bank`, async () => {
    const resultArray = [
      [getQuizControllerAddQuestionBank200Response(), { status: 200 }],
      [getQuizControllerAddQuestionBank400Response(), { status: 400 }],
      [getQuizControllerAddQuestionBank404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/quizzes/quiz/:quizId/bank`) % resultArray.length
      ],
    );
  }),
  http.patch(`${baseURL}/api/quizzes/quiz/:quizId/bank`, async () => {
    const resultArray = [
      [getQuizControllerEditQuestionBank200Response(), { status: 200 }],
      [getQuizControllerEditQuestionBank400Response(), { status: 400 }],
      [getQuizControllerEditQuestionBank404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`patch /api/quizzes/quiz/:quizId/bank`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/quizzes/quiz/:quizId/bank`, async () => {
    const resultArray = [
      [getQuizControllerGetAllQuestionBanks200Response(), { status: 200 }],
      [getQuizControllerGetAllQuestionBanks404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/quiz/:quizId/bank`) % resultArray.length
      ],
    );
  }),
  http.delete(
    `${baseURL}/api/quizzes/quiz/:quizId/bank/:questionBankId`,
    async () => {
      const resultArray = [
        [getQuizControllerRemoveQuestionBank200Response(), { status: 200 }],
        [getQuizControllerRemoveQuestionBank404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`delete /api/quizzes/quiz/:quizId/bank/:questionBankId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/api/quizzes/quiz/:quizId/user/:userId`, async () => {
    const resultArray = [
      [getQuizControllerGetUserMetrices200Response(), { status: 200 }],
      [getQuizControllerGetUserMetrices400Response(), { status: 400 }],
      [getQuizControllerGetUserMetrices404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/quiz/:quizId/user/:userId`) % resultArray.length
      ],
    );
  }),
  http.get(
    `${baseURL}/api/quizzes/quiz/:quizId/attempts/:attemptId`,
    async () => {
      const resultArray = [
        [getQuizControllerGetQuizAttempt200Response(), { status: 200 }],
        [getQuizControllerGetQuizAttempt404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`get /api/quizzes/quiz/:quizId/attempts/:attemptId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/api/quizzes/quiz/:quizId/submissions/:submissionId`,
    async () => {
      const resultArray = [
        [getQuizControllerGetQuizSubmission200Response(), { status: 200 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`get /api/quizzes/quiz/:quizId/submissions/:submissionId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/api/quizzes/quiz/:quizId/submissions`, async () => {
    const resultArray = [
      [getQuizControllerGetAllSubmissions200Response(), { status: 200 }],
      [getQuizControllerGetAllSubmissions400Response(), { status: 400 }],
      [getQuizControllerGetAllSubmissions404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/quiz/:quizId/submissions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/quizzes/quiz/:quizId/details`, async () => {
    const resultArray = [
      [getQuizControllerGetQuizDetails200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/quiz/:quizId/details`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/quizzes/quiz/:quizId/analytics`, async () => {
    const resultArray = [
      [getQuizControllerGetQuizAnalytics200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/quiz/:quizId/analytics`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/quizzes/quiz/:quizId/performance`, async () => {
    const resultArray = [
      [getQuizControllerGetQuizPerformance200Response(), { status: 200 }],
      [getQuizControllerGetQuizPerformance400Response(), { status: 400 }],
      [getQuizControllerGetQuizPerformance404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/quiz/:quizId/performance`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/quizzes/quiz/:quizId/results`, async () => {
    const resultArray = [
      [getQuizControllerGetQuizResults200Response(), { status: 200 }],
      [getQuizControllerGetQuizResults400Response(), { status: 400 }],
      [getQuizControllerGetQuizResults404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/quiz/:quizId/results`) % resultArray.length
      ],
    );
  }),
  http.post(
    `${baseURL}/api/quizzes/quiz/:quizId/submission/:submissionId/score/:score`,
    async () => {
      const resultArray = [
        [
          getQuizControllerUpdateQuizSubmissionScore200Response(),
          { status: 200 },
        ],
        [
          getQuizControllerUpdateQuizSubmissionScore400Response(),
          { status: 400 },
        ],
        [
          getQuizControllerUpdateQuizSubmissionScore404Response(),
          { status: 404 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/quizzes/quiz/:quizId/submission/:submissionId/score/:score`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/quizzes/quiz/:quizId/submission/:submissionId/regrade`,
    async () => {
      const resultArray = [
        [getQuizControllerRegradeSubmission200Response(), { status: 200 }],
        [getQuizControllerRegradeSubmission400Response(), { status: 400 }],
        [getQuizControllerRegradeSubmission404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/quizzes/quiz/:quizId/submission/:submissionId/regrade`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/quizzes/quiz/:quizId/submission/:submissionId/question/:questionId/feedback`,
    async () => {
      const resultArray = [
        [getQuizControllerAddFeedbackToQuestion200Response(), { status: 200 }],
        [getQuizControllerAddFeedbackToQuestion400Response(), { status: 400 }],
        [getQuizControllerAddFeedbackToQuestion404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `post /api/quizzes/quiz/:quizId/submission/:submissionId/question/:questionId/feedback`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/quizzes/quiz/:quizId/user/:userId/reset-attempts`,
    async () => {
      const resultArray = [
        [getQuizControllerResetAvailableAttempts200Response(), { status: 200 }],
        [getQuizControllerResetAvailableAttempts400Response(), { status: 400 }],
        [getQuizControllerResetAvailableAttempts404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /api/quizzes/quiz/:quizId/user/:userId/reset-attempts`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/api/quizzes/question-bank/`, async () => {
    const resultArray = [
      [getQuestionBankControllerCreate200Response(), { status: 200 }],
      [getQuestionBankControllerCreate404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/quizzes/question-bank/`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/quizzes/question-bank/:questionBankId`, async () => {
    const resultArray = [
      [getQuestionBankControllerGetById200Response(), { status: 200 }],
      [getQuestionBankControllerGetById404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/question-bank/:questionBankId`) %
          resultArray.length
      ],
    );
  }),
  http.patch(
    `${baseURL}/api/quizzes/question-bank/:questionBankId/questions/:questionId/add`,
    async () => {
      const resultArray = [
        [getQuestionBankControllerAddQuestion200Response(), { status: 200 }],
        [getQuestionBankControllerAddQuestion404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `patch /api/quizzes/question-bank/:questionBankId/questions/:questionId/add`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.patch(
    `${baseURL}/api/quizzes/question-bank/:questionBankId/questions/:questionId/remove`,
    async () => {
      const resultArray = [
        [getQuestionBankControllerRemoveQuestion200Response(), { status: 200 }],
        [getQuestionBankControllerRemoveQuestion404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `patch /api/quizzes/question-bank/:questionBankId/questions/:questionId/remove`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.patch(
    `${baseURL}/api/quizzes/question-bank/:questionBankId/questions/:questionId/replace-duplicate`,
    async () => {
      const resultArray = [
        [
          getQuestionBankControllerReplaceQuestion200Response(),
          { status: 200 },
        ],
        [
          getQuestionBankControllerReplaceQuestion404Response(),
          { status: 404 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `patch /api/quizzes/question-bank/:questionBankId/questions/:questionId/replace-duplicate`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/api/quizzes/:quizId/attempt`, async () => {
    const resultArray = [
      [getAttemptControllerAttempt200Response(), { status: 200 }],
      [getAttemptControllerAttempt400Response(), { status: 400 }],
      [getAttemptControllerAttempt404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/quizzes/:quizId/attempt`) % resultArray.length
      ],
    );
  }),
  http.post(
    `${baseURL}/api/quizzes/:quizId/attempt/:attemptId/save`,
    async () => {
      const resultArray = [
        [getAttemptControllerSave200Response(), { status: 200 }],
        [getAttemptControllerSave400Response(), { status: 400 }],
        [getAttemptControllerSave404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /api/quizzes/:quizId/attempt/:attemptId/save`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(
    `${baseURL}/api/quizzes/:quizId/attempt/:attemptId/submit`,
    async () => {
      const resultArray = [
        [getAttemptControllerSubmit200Response(), { status: 200 }],
        [getAttemptControllerSubmit400Response(), { status: 400 }],
        [getAttemptControllerSubmit404Response(), { status: 404 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /api/quizzes/:quizId/attempt/:attemptId/submit`) %
            resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/api/quizzes/:quizId/attempt/:attemptId`, async () => {
    const resultArray = [
      [getAttemptControllerGetAttempt200Response(), { status: 200 }],
      [getAttemptControllerGetAttempt400Response(), { status: 400 }],
      [getAttemptControllerGetAttempt404Response(), { status: 404 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/quizzes/:quizId/attempt/:attemptId`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/genai/generate/transcript`, async () => {
    const resultArray = [
      [getGenAiVideoControllerGenerateTranscript200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/genai/generate/transcript`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/genai/generate/transcript/segment`, async () => {
    const resultArray = [
      [getGenAiVideoControllerSegmentTranscript200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/genai/generate/transcript/segment`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/genai/generate/questions`, async () => {
    const resultArray = [
      [getGenAiVideoControllerGenerateQuestions200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/genai/generate/questions`) % resultArray.length
      ],
    );
  }),
  http.post(
    `${baseURL}/api/genai/generate-course-items-from-video`,
    async () => {
      const resultArray = [
        [
          getGenAiVideoControllerGenerateCourseItemsFromVideo200Response(),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /api/genai/generate-course-items-from-video`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/api/settings/courses/`, async () => {
    const resultArray = [
      [getCourseSettingsControllerCreate201Response(), { status: 201 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /api/settings/courses/`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/settings/courses/:courseId/:versionId`, async () => {
    const resultArray = [
      [getCourseSettingsControllerGet200Response(), { status: 200 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/settings/courses/:courseId/:versionId`) %
          resultArray.length
      ],
    );
  }),
  http.put(
    `${baseURL}/api/settings/courses/:courseId/:versionId/proctoring`,
    async () => {
      const resultArray = [
        [
          getCourseSettingsControllerUpdateCourseSettings200Response(),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`put /api/settings/courses/:courseId/:versionId/proctoring`) %
            resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/api/settings/users/`, async () => {
    const resultArray = [
      [getUserSettingsControllerCreate201Response(), { status: 201 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /api/settings/users/`) % resultArray.length],
    );
  }),
  http.get(
    `${baseURL}/api/settings/users/:studentId/:courseId/:versionId`,
    async () => {
      const resultArray = [
        [getUserSettingsControllerGet200Response(), { status: 200 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`get /api/settings/users/:studentId/:courseId/:versionId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.put(
    `${baseURL}/api/settings/users/:studentId/:courseId/:versionId/proctoring`,
    async () => {
      const resultArray = [
        [
          getUserSettingsControllerUpdateUserSettings200Response(),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `put /api/settings/users/:studentId/:courseId/:versionId/proctoring`,
          ) % resultArray.length
        ],
      );
    },
  ),
];

export function getInviteControllerInviteUsers200Response() {
  return {
    invites: [
      {
        inviteId: "60c72b2f9b1e8d3f4c8b4567",
        email: "user@example.com",
        inviteStatus: "PENDING",
        role: "STUDENT",
        courseId: "60c72b2f9b1e8d3f4c8b4567",
        courseVersionId: "60c72b2f9b1e8d3f4c8b4567",
        userId: "60d21b4667d0d8992e610c01",
      },
    ],
  };
}

export function getInviteControllerInviteUsers400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getInviteControllerGetInvitesForCourseVersion200Response() {
  return {
    invites: [
      {
        inviteId: "60c72b2f9b1e8d3f4c8b4567",
        email: "user@example.com",
        inviteStatus: "PENDING",
        role: "STUDENT",
        courseId: "60c72b2f9b1e8d3f4c8b4567",
        courseVersionId: "60c72b2f9b1e8d3f4c8b4567",
        userId: "60d21b4667d0d8992e610c01",
      },
    ],
  };
}

export function getInviteControllerProcessInvites200Response() {
  return null;
}

export function getInviteControllerResendInvite200Response() {
  return {
    message: "Invite processed successfully",
  };
}

export function getInviteControllerCancelInvite200Response() {
  return {
    message: "Invite processed successfully",
  };
}

export function getEnrollmentControllerEnrollUser200Response() {
  return {
    enrollment: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _id: "64a98c1f2f9e4d3d902db8c1",
      userId: "64a98c1f2f9e4d3d902db8c2",
      courseId: "64a98c1f2f9e4d3d902db8c3",
      courseVersionId: "64a98c1f2f9e4d3d902db8c4",
      role: "STUDENT",
      status: "ACTIVE",
      enrollmentDate: "2025-07-01T12:00:00.000Z",
    })),
    progress: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _id: "64b1c1f5a2c4b8d9e6f7a901",
      userId: "64b1c1f5a2c4b8d9e6f7a902",
      courseId: "64b1c1f5a2c4b8d9e6f7a903",
      courseVersionId: "64b1c1f5a2c4b8d9e6f7a904",
      currentModule: "64b1c1f5a2c4b8d9e6f7a905",
      currentSection: "64b1c1f5a2c4b8d9e6f7a906",
      currentItem: "64b1c1f5a2c4b8d9e6f7a907",
      completed: faker.datatype.boolean(),
    })),
    role: "STUDENT",
  };
}

export function getEnrollmentControllerEnrollUser400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getEnrollmentControllerEnrollUser404Response() {
  return {
    message: "Enrollment could not be created or found.",
  };
}

export function getEnrollmentControllerGetEnrollment200Response() {
  return {
    role: "STUDENT",
    status: "ACTIVE",
    enrollmentDate: "2025-07-01T12:00:00.000Z",
  };
}

export function getEnrollmentControllerGetEnrollment404Response() {
  return {
    message: "Enrollment could not be created or found.",
  };
}

export function getEnrollmentControllerUnenrollUser200Response() {
  return {
    enrollment: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _id: "64a98c1f2f9e4d3d902db8c1",
      userId: "64a98c1f2f9e4d3d902db8c2",
      courseId: "64a98c1f2f9e4d3d902db8c3",
      courseVersionId: "64a98c1f2f9e4d3d902db8c4",
      role: "STUDENT",
      status: "ACTIVE",
      enrollmentDate: "2025-07-01T12:00:00.000Z",
    })),
    progress: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _id: "64b1c1f5a2c4b8d9e6f7a901",
      userId: "64b1c1f5a2c4b8d9e6f7a902",
      courseId: "64b1c1f5a2c4b8d9e6f7a903",
      courseVersionId: "64b1c1f5a2c4b8d9e6f7a904",
      currentModule: "64b1c1f5a2c4b8d9e6f7a905",
      currentSection: "64b1c1f5a2c4b8d9e6f7a906",
      currentItem: "64b1c1f5a2c4b8d9e6f7a907",
      completed: faker.datatype.boolean(),
    })),
    role: "STUDENT",
  };
}

export function getEnrollmentControllerUnenrollUser404Response() {
  return {
    message: "Enrollment could not be created or found.",
  };
}

export function getEnrollmentControllerGetUserEnrollments200Response() {
  return {
    totalDocuments: 100,
    totalPages: 10,
    currentPage: 1,
    enrollments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _id: "60d5ec49b3f1c8e4a8f8b8d2",
      user: {},
      userId: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      courseVersionId: "60d5ec49b3f1c8e4a8f8b8c3",
      role: "INSTRUCTOR",
      status: "active",
      enrollmentDate: "2023-10-01T12:00:00.000Z",
    })),
  };
}

export function getEnrollmentControllerGetUserEnrollments400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getEnrollmentControllerGetUserEnrollments404Response() {
  return {
    message: "Enrollment could not be created or found.",
  };
}

export function getEnrollmentControllerGetCourseVersionEnrollments200Response() {
  return {
    enrollments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _id: "60d5ec49b3f1c8e4a8f8b8d2",
      user: {},
      userId: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      courseVersionId: "60d5ec49b3f1c8e4a8f8b8c3",
      role: "INSTRUCTOR",
      status: "active",
      enrollmentDate: "2023-10-01T12:00:00.000Z",
    })),
  };
}

export function getEnrollmentControllerGetCourseVersionEnrollments400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getEnrollmentControllerGetCourseVersionEnrollments404Response() {
  return {
    message: "Enrollment could not be created or found.",
  };
}

export function getProgressControllerGetUserProgress200Response() {
  return {
    _id: "60d5ec49b3f1c8e4a8f8b8d1",
    userId: "60d5ec49b3f1c8e4a8f8b8c1",
    courseId: "60d5ec49b3f1c8e4a8f8b8c2",
    courseVersionId: "60d5ec49b3f1c8e4a8f8b8c3",
    currentModule: "60d5ec49b3f1c8e4a8f8b8c5",
    currentSection: "60d5ec49b3f1c8e4a8f8b8c6",
    currentItem: "60d5ec49b3f1c8e4a8f8b8c4",
    completed: faker.datatype.boolean(),
  };
}

export function getProgressControllerGetUserProgress404Response() {
  return {
    message: "Progress not found for the specified user and course version",
  };
}

export function getProgressControllerGetUserProgressPercentage200Response() {
  return {
    completed: true,
    percentCompleted: 75,
    totalItems: 20,
    completedItems: 15,
  };
}

export function getProgressControllerGetUserProgressPercentage404Response() {
  return {
    message: "Progress not found for the specified user and course version",
  };
}

export function getProgressControllerStartItem200Response() {
  return {
    watchItemId: "60d5ec49b3f1c8e4a8f8b8c7",
  };
}

export function getProgressControllerStartItem400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getProgressControllerStartItem404Response() {
  return {
    message: "Progress not found for the specified user and course version",
  };
}

export function getProgressControllerStopItem200Response() {
  return null;
}

export function getProgressControllerStopItem400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getProgressControllerStopItem404Response() {
  return {
    message: "Progress not found for the specified user and course version",
  };
}

export function getProgressControllerStopItem500Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getProgressControllerUpdateProgress200Response() {
  return null;
}

export function getProgressControllerUpdateProgress400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getProgressControllerUpdateProgress404Response() {
  return {
    message: "Progress not found for the specified user and course version",
  };
}

export function getProgressControllerUpdateProgress500Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getProgressControllerResetProgress200Response() {
  return null;
}

export function getProgressControllerResetProgress404Response() {
  return {
    message: "User not found with the provided Firebase UID",
  };
}

export function getProgressControllerResetProgress500Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getProgressControllerGetWatchTime200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    _id: faker.string.uuid(),
    userId: faker.string.uuid(),
    courseId: faker.string.uuid(),
    courseVersionId: faker.string.uuid(),
    itemId: faker.string.uuid(),
    startTime: faker.date.past(),
    endTime: faker.date.past(),
  }));
}

export function getProgressControllerGetWatchTime404Response() {
  return {
    message: "User not found with the provided Firebase UID",
  };
}

export function getProgressControllerGetWatchTime500Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getUserControllerGetUserById200Response() {
  return {
    _id: "60d5ec49b3f1c8e4a8f8b8d1",
    firebaseUID: "firebase-uid-123456",
    email: "user@example.com",
    firstName: "John",
    lastName: "Doe",
    roles: "user",
  };
}

export function getUserControllerGetUserById404Response() {
  return {
    message: "User not found with the provided Firebase UID",
  };
}

export function getUserControllerEditUser200Response() {
  return null;
}

export function getUserControllerEditUser404Response() {
  return {
    message: "User not found with the provided Firebase UID",
  };
}

export function getUserControllerMakeAdmin200Response() {
  return null;
}

export function getUserControllerMakeAdmin404Response() {
  return {
    message: "User not found with the provided Firebase UID",
  };
}

export function getAuthControllerSignup201Response() {
  return null;
}

export function getAuthControllerGoogleSignup201Response() {
  return null;
}

export function getAuthControllerChangePassword200Response() {
  return null;
}

export function getAuthControllerLogin200Response() {
  return null;
}

export function getCourseControllerCreate201Response() {
  return {
    _id: faker.string.uuid(),
    name: "Introduction to Programming",
    description: "This course covers the basics of programming.",
    versions: ["60d5ec49b3f1c8e4a8f8b8c2"],
    instructors: ["60d5ec49b3f1c8e4a8f8b8c4"],
    createdAt: "2023-10-01T12:00:00.000Z",
    updatedAt: "2023-10-01T12:00:00.000Z",
  };
}

export function getCourseControllerCreate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getCourseControllerRead200Response() {
  return {
    _id: faker.string.uuid(),
    name: "Introduction to Programming",
    description: "This course covers the basics of programming.",
    versions: ["60d5ec49b3f1c8e4a8f8b8c2"],
    instructors: ["60d5ec49b3f1c8e4a8f8b8c4"],
    createdAt: "2023-10-01T12:00:00.000Z",
    updatedAt: "2023-10-01T12:00:00.000Z",
  };
}

export function getCourseControllerRead400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getCourseControllerRead404Response() {
  return {
    message:
      "No course found with the specified ID. Please verify the ID and try again.",
  };
}

export function getCourseControllerUpdate200Response() {
  return {
    _id: faker.string.uuid(),
    name: "Introduction to Programming",
    description: "This course covers the basics of programming.",
    versions: ["60d5ec49b3f1c8e4a8f8b8c2"],
    instructors: ["60d5ec49b3f1c8e4a8f8b8c4"],
    createdAt: "2023-10-01T12:00:00.000Z",
    updatedAt: "2023-10-01T12:00:00.000Z",
  };
}

export function getCourseControllerUpdate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getCourseControllerUpdate404Response() {
  return {
    message:
      "No course found with the specified ID. Please verify the ID and try again.",
  };
}

export function getCourseControllerDelete200Response() {
  return null;
}

export function getCourseControllerDelete400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getCourseControllerDelete404Response() {
  return {
    message:
      "No course found with the specified ID. Please verify the ID and try again.",
  };
}

export function getCourseVersionControllerCreate201Response() {
  return {
    _id: "60d5ec49b3f1c8e4a8f8b8c1",
    courseId: "60d5ec49b3f1c8e4a8f8b8c2",
    version: "v1.0.0",
    description: "Initial release of course materials.",
    modules: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
      name: "Introduction to JavaScript",
      description:
        "This module introduces the basics of JavaScript programming.",
      order: "001-002",
      sections: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
        name: "Variables and Data Types",
        description:
          "This section explains variables, constants, and data types in JavaScript.",
        order: "001-001",
        itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
        createdAt: "2024-07-01T09:30:00.000Z",
        updatedAt: "2024-07-01T11:00:00.000Z",
      })),
      createdAt: "2024-07-01T10:00:00.000Z",
      updatedAt: "2024-07-01T12:00:00.000Z",
    })),
    createdAt: "2024-07-01T12:00:00.000Z",
    updatedAt: "2024-07-01T15:30:00.000Z",
  };
}

export function getCourseVersionControllerCreate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getCourseVersionControllerCreate404Response() {
  return {
    message: "Course version not found",
  };
}

export function getCourseVersionControllerRead200Response() {
  return {
    _id: "60d5ec49b3f1c8e4a8f8b8c1",
    courseId: "60d5ec49b3f1c8e4a8f8b8c2",
    version: "v1.0.0",
    description: "Initial release of course materials.",
    modules: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
      name: "Introduction to JavaScript",
      description:
        "This module introduces the basics of JavaScript programming.",
      order: "001-002",
      sections: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
        name: "Variables and Data Types",
        description:
          "This section explains variables, constants, and data types in JavaScript.",
        order: "001-001",
        itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
        createdAt: "2024-07-01T09:30:00.000Z",
        updatedAt: "2024-07-01T11:00:00.000Z",
      })),
      createdAt: "2024-07-01T10:00:00.000Z",
      updatedAt: "2024-07-01T12:00:00.000Z",
    })),
    createdAt: "2024-07-01T12:00:00.000Z",
    updatedAt: "2024-07-01T15:30:00.000Z",
  };
}

export function getCourseVersionControllerRead400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getCourseVersionControllerRead404Response() {
  return {
    message: "Course version not found",
  };
}

export function getCourseVersionControllerDelete200Response() {
  return {
    message: faker.string.alpha({ length: { min: 1, max: MAX_STRING_LENGTH } }),
  };
}

export function getCourseVersionControllerDelete400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getCourseVersionControllerDelete404Response() {
  return {
    message: "Course version not found",
  };
}

export function getItemControllerCreate201Response() {
  return {
    itemsGroup: {
      _id: faker.string.uuid(),
      items: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _id: faker.string.uuid(),
        type: faker.helpers.arrayElement(["VIDEO", "QUIZ", "BLOG"]),
        order: faker.string.alpha({
          length: { min: 1, max: MAX_STRING_LENGTH },
        }),
      })),
      sectionId: faker.string.uuid(),
    },
    version: {
      _id: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      version: "v1.0.0",
      description: "Initial release of course materials.",
      modules: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
        name: "Introduction to JavaScript",
        description:
          "This module introduces the basics of JavaScript programming.",
        order: "001-002",
        sections: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
          name: "Variables and Data Types",
          description:
            "This section explains variables, constants, and data types in JavaScript.",
          order: "001-001",
          itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
          createdAt: "2024-07-01T09:30:00.000Z",
          updatedAt: "2024-07-01T11:00:00.000Z",
        })),
        createdAt: "2024-07-01T10:00:00.000Z",
        updatedAt: "2024-07-01T12:00:00.000Z",
      })),
      createdAt: "2024-07-01T12:00:00.000Z",
      updatedAt: "2024-07-01T15:30:00.000Z",
    },
    createdItem: {},
  };
}

export function getItemControllerCreate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getItemControllerCreate404Response() {
  return {
    message:
      "No item found with the specified ID. Please verify the ID and try again.",
  };
}

export function getItemControllerReadAll200Response() {
  return {
    itemsGroup: {
      _id: faker.string.uuid(),
      items: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _id: faker.string.uuid(),
        type: faker.helpers.arrayElement(["VIDEO", "QUIZ", "BLOG"]),
        order: faker.string.alpha({
          length: { min: 1, max: MAX_STRING_LENGTH },
        }),
      })),
      sectionId: faker.string.uuid(),
    },
    version: {
      _id: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      version: "v1.0.0",
      description: "Initial release of course materials.",
      modules: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
        name: "Introduction to JavaScript",
        description:
          "This module introduces the basics of JavaScript programming.",
        order: "001-002",
        sections: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
          name: "Variables and Data Types",
          description:
            "This section explains variables, constants, and data types in JavaScript.",
          order: "001-001",
          itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
          createdAt: "2024-07-01T09:30:00.000Z",
          updatedAt: "2024-07-01T11:00:00.000Z",
        })),
        createdAt: "2024-07-01T10:00:00.000Z",
        updatedAt: "2024-07-01T12:00:00.000Z",
      })),
      createdAt: "2024-07-01T12:00:00.000Z",
      updatedAt: "2024-07-01T15:30:00.000Z",
    },
    createdItem: {},
  };
}

export function getItemControllerReadAll400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getItemControllerReadAll404Response() {
  return {
    message:
      "No item found with the specified ID. Please verify the ID and try again.",
  };
}

export function getItemControllerUpdate200Response() {
  return {
    itemsGroup: {
      _id: faker.string.uuid(),
      items: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _id: faker.string.uuid(),
        type: faker.helpers.arrayElement(["VIDEO", "QUIZ", "BLOG"]),
        order: faker.string.alpha({
          length: { min: 1, max: MAX_STRING_LENGTH },
        }),
      })),
      sectionId: faker.string.uuid(),
    },
    version: {
      _id: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      version: "v1.0.0",
      description: "Initial release of course materials.",
      modules: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
        name: "Introduction to JavaScript",
        description:
          "This module introduces the basics of JavaScript programming.",
        order: "001-002",
        sections: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
          name: "Variables and Data Types",
          description:
            "This section explains variables, constants, and data types in JavaScript.",
          order: "001-001",
          itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
          createdAt: "2024-07-01T09:30:00.000Z",
          updatedAt: "2024-07-01T11:00:00.000Z",
        })),
        createdAt: "2024-07-01T10:00:00.000Z",
        updatedAt: "2024-07-01T12:00:00.000Z",
      })),
      createdAt: "2024-07-01T12:00:00.000Z",
      updatedAt: "2024-07-01T15:30:00.000Z",
    },
    createdItem: {},
  };
}

export function getItemControllerUpdate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getItemControllerUpdate404Response() {
  return {
    message:
      "No item found with the specified ID. Please verify the ID and try again.",
  };
}

export function getItemControllerDelete200Response() {
  return {
    deletedItemId: faker.string.uuid(),
    updatedItemsGroup: {
      _id: faker.string.uuid(),
      items: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _id: faker.string.uuid(),
        type: faker.helpers.arrayElement(["VIDEO", "QUIZ", "BLOG"]),
        order: faker.string.alpha({
          length: { min: 1, max: MAX_STRING_LENGTH },
        }),
      })),
      sectionId: faker.string.uuid(),
    },
  };
}

export function getItemControllerDelete400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getItemControllerDelete404Response() {
  return {
    message:
      "No item found with the specified ID. Please verify the ID and try again.",
  };
}

export function getItemControllerMove200Response() {
  return {
    itemsGroup: {
      _id: faker.string.uuid(),
      items: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _id: faker.string.uuid(),
        type: faker.helpers.arrayElement(["VIDEO", "QUIZ", "BLOG"]),
        order: faker.string.alpha({
          length: { min: 1, max: MAX_STRING_LENGTH },
        }),
      })),
      sectionId: faker.string.uuid(),
    },
    version: {
      _id: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      version: "v1.0.0",
      description: "Initial release of course materials.",
      modules: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
        name: "Introduction to JavaScript",
        description:
          "This module introduces the basics of JavaScript programming.",
        order: "001-002",
        sections: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
          name: "Variables and Data Types",
          description:
            "This section explains variables, constants, and data types in JavaScript.",
          order: "001-001",
          itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
          createdAt: "2024-07-01T09:30:00.000Z",
          updatedAt: "2024-07-01T11:00:00.000Z",
        })),
        createdAt: "2024-07-01T10:00:00.000Z",
        updatedAt: "2024-07-01T12:00:00.000Z",
      })),
      createdAt: "2024-07-01T12:00:00.000Z",
      updatedAt: "2024-07-01T15:30:00.000Z",
    },
    createdItem: {},
  };
}

export function getItemControllerMove400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getItemControllerMove404Response() {
  return {
    message:
      "No item found with the specified ID. Please verify the ID and try again.",
  };
}

export function getItemControllerGetItem201Response() {
  return {
    versionId: faker.string.uuid(),
    itemId: faker.string.uuid(),
  };
}

export function getItemControllerGetItem400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getItemControllerGetItem404Response() {
  return {
    message:
      "No item found with the specified ID. Please verify the ID and try again.",
  };
}

export function getModuleControllerCreate201Response() {
  return {
    version: {
      _id: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      version: "v1.0.0",
      description: "Initial release of course materials.",
      modules: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
        name: "Introduction to JavaScript",
        description:
          "This module introduces the basics of JavaScript programming.",
        order: "001-002",
        sections: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
          name: "Variables and Data Types",
          description:
            "This section explains variables, constants, and data types in JavaScript.",
          order: "001-001",
          itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
          createdAt: "2024-07-01T09:30:00.000Z",
          updatedAt: "2024-07-01T11:00:00.000Z",
        })),
        createdAt: "2024-07-01T10:00:00.000Z",
        updatedAt: "2024-07-01T12:00:00.000Z",
      })),
      createdAt: "2024-07-01T12:00:00.000Z",
      updatedAt: "2024-07-01T15:30:00.000Z",
    },
  };
}

export function getModuleControllerCreate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getModuleControllerCreate404Response() {
  return {
    message: faker.string.alpha({ length: { min: 1, max: MAX_STRING_LENGTH } }),
  };
}

export function getModuleControllerUpdate200Response() {
  return {
    version: {
      _id: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      version: "v1.0.0",
      description: "Initial release of course materials.",
      modules: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
        name: "Introduction to JavaScript",
        description:
          "This module introduces the basics of JavaScript programming.",
        order: "001-002",
        sections: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
          name: "Variables and Data Types",
          description:
            "This section explains variables, constants, and data types in JavaScript.",
          order: "001-001",
          itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
          createdAt: "2024-07-01T09:30:00.000Z",
          updatedAt: "2024-07-01T11:00:00.000Z",
        })),
        createdAt: "2024-07-01T10:00:00.000Z",
        updatedAt: "2024-07-01T12:00:00.000Z",
      })),
      createdAt: "2024-07-01T12:00:00.000Z",
      updatedAt: "2024-07-01T15:30:00.000Z",
    },
  };
}

export function getModuleControllerUpdate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getModuleControllerUpdate404Response() {
  return {
    message: faker.string.alpha({ length: { min: 1, max: MAX_STRING_LENGTH } }),
  };
}

export function getModuleControllerDelete200Response() {
  return {
    message: faker.string.alpha({ length: { min: 1, max: MAX_STRING_LENGTH } }),
  };
}

export function getModuleControllerDelete400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getModuleControllerDelete404Response() {
  return {
    message: faker.string.alpha({ length: { min: 1, max: MAX_STRING_LENGTH } }),
  };
}

export function getModuleControllerMove200Response() {
  return {
    version: {
      _id: "60d5ec49b3f1c8e4a8f8b8c1",
      courseId: "60d5ec49b3f1c8e4a8f8b8c2",
      version: "v1.0.0",
      description: "Initial release of course materials.",
      modules: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
        name: "Introduction to JavaScript",
        description:
          "This module introduces the basics of JavaScript programming.",
        order: "001-002",
        sections: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
          name: "Variables and Data Types",
          description:
            "This section explains variables, constants, and data types in JavaScript.",
          order: "001-001",
          itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
          createdAt: "2024-07-01T09:30:00.000Z",
          updatedAt: "2024-07-01T11:00:00.000Z",
        })),
        createdAt: "2024-07-01T10:00:00.000Z",
        updatedAt: "2024-07-01T12:00:00.000Z",
      })),
      createdAt: "2024-07-01T12:00:00.000Z",
      updatedAt: "2024-07-01T15:30:00.000Z",
    },
  };
}

export function getModuleControllerMove400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getModuleControllerMove404Response() {
  return {
    message: faker.string.alpha({ length: { min: 1, max: MAX_STRING_LENGTH } }),
  };
}

export function getSectionControllerCreate201Response() {
  return {
    _id: "60d5ec49b3f1c8e4a8f8b8c1",
    courseId: "60d5ec49b3f1c8e4a8f8b8c2",
    version: "v1.0.0",
    description: "Initial release of course materials.",
    modules: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
      name: "Introduction to JavaScript",
      description:
        "This module introduces the basics of JavaScript programming.",
      order: "001-002",
      sections: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
        name: "Variables and Data Types",
        description:
          "This section explains variables, constants, and data types in JavaScript.",
        order: "001-001",
        itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
        createdAt: "2024-07-01T09:30:00.000Z",
        updatedAt: "2024-07-01T11:00:00.000Z",
      })),
      createdAt: "2024-07-01T10:00:00.000Z",
      updatedAt: "2024-07-01T12:00:00.000Z",
    })),
    createdAt: "2024-07-01T12:00:00.000Z",
    updatedAt: "2024-07-01T15:30:00.000Z",
  };
}

export function getSectionControllerCreate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getSectionControllerCreate404Response() {
  return {
    message:
      "No section found with the specified ID. Please verify the ID and try again.",
  };
}

export function getSectionControllerUpdate200Response() {
  return {
    _id: "60d5ec49b3f1c8e4a8f8b8c1",
    courseId: "60d5ec49b3f1c8e4a8f8b8c2",
    version: "v1.0.0",
    description: "Initial release of course materials.",
    modules: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
      name: "Introduction to JavaScript",
      description:
        "This module introduces the basics of JavaScript programming.",
      order: "001-002",
      sections: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
        name: "Variables and Data Types",
        description:
          "This section explains variables, constants, and data types in JavaScript.",
        order: "001-001",
        itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
        createdAt: "2024-07-01T09:30:00.000Z",
        updatedAt: "2024-07-01T11:00:00.000Z",
      })),
      createdAt: "2024-07-01T10:00:00.000Z",
      updatedAt: "2024-07-01T12:00:00.000Z",
    })),
    createdAt: "2024-07-01T12:00:00.000Z",
    updatedAt: "2024-07-01T15:30:00.000Z",
  };
}

export function getSectionControllerUpdate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getSectionControllerUpdate404Response() {
  return {
    message:
      "No section found with the specified ID. Please verify the ID and try again.",
  };
}

export function getSectionControllerDelete200Response() {
  return {
    message:
      "Section with the ID 60d5ec49b3f1c8e4a8f8b8e6 in Version 60d5ec49b3f1c8e4a8f8b8d5 has been deleted successfully.",
  };
}

export function getSectionControllerDelete400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getSectionControllerDelete404Response() {
  return {
    message:
      "No section found with the specified ID. Please verify the ID and try again.",
  };
}

export function getSectionControllerMove200Response() {
  return {
    _id: "60d5ec49b3f1c8e4a8f8b8c1",
    courseId: "60d5ec49b3f1c8e4a8f8b8c2",
    version: "v1.0.0",
    description: "Initial release of course materials.",
    modules: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      moduleId: "60e5ac43b3a1b0d1f8c7a8d2",
      name: "Introduction to JavaScript",
      description:
        "This module introduces the basics of JavaScript programming.",
      order: "001-002",
      sections: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        sectionId: "60f6bc47c8b7d9e5f1a2a3b4",
        name: "Variables and Data Types",
        description:
          "This section explains variables, constants, and data types in JavaScript.",
        order: "001-001",
        itemsGroupId: "60f6bc47c8b7d9e5f1a2a3b5",
        createdAt: "2024-07-01T09:30:00.000Z",
        updatedAt: "2024-07-01T11:00:00.000Z",
      })),
      createdAt: "2024-07-01T10:00:00.000Z",
      updatedAt: "2024-07-01T12:00:00.000Z",
    })),
    createdAt: "2024-07-01T12:00:00.000Z",
    updatedAt: "2024-07-01T15:30:00.000Z",
  };
}

export function getSectionControllerMove400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getSectionControllerMove404Response() {
  return {
    message:
      "No section found with the specified ID. Please verify the ID and try again.",
  };
}

export function getQuestionControllerCreate201Response() {
  return {
    questionId: "60d21b4667d0d8992e610c87",
  };
}

export function getQuestionControllerCreate400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuestionControllerGetById200Response() {
  return {
    _id: "60d21b4667d0d8992e610c87",
    solutionText: "The answer is found by adding 2 and 2.",
    decimalPrecision: 2,
    upperLimit: 100,
    lowerLimit: faker.number.int(),
    value: 42,
    expression: "21 * 2",
    ordering: [
      { lotItem: { text: "Step 1", explaination: "..." }, order: 1 },
      { lotItem: { text: "Step 2", explaination: "..." }, order: 2 },
    ],
    correctLotItems: [
      { text: "Option A", explaination: "Correct because..." },
      { text: "Option D", explaination: "Correct because..." },
    ],
    incorrectLotItems: [
      { text: "Option B", explaination: "Incorrect because..." },
      { text: "Option C", explaination: "Incorrect because..." },
    ],
    correctLotItem: {
      text: "Option A",
      explaination: "This is the correct answer because...",
    },
    text: "What is 2 + 2?",
    type: "SELECT_ONE_IN_LOT",
    isParameterized: faker.datatype.boolean(),
    parameters: [
      { name: "Param1", possibleValues: ["cat", "dog"], type: "string" },
    ],
    hint: "Think about basic addition.",
    timeLimitSeconds: 60,
    points: 5,
  };
}

export function getQuestionControllerGetById400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuestionControllerGetById404Response() {
  return {
    message: "Question not found.",
  };
}

export function getQuestionControllerUpdate200Response() {
  return {
    _id: "60d21b4667d0d8992e610c87",
    solutionText: "The answer is found by adding 2 and 2.",
    decimalPrecision: 2,
    upperLimit: 100,
    lowerLimit: faker.number.int(),
    value: 42,
    expression: "21 * 2",
    ordering: [
      { lotItem: { text: "Step 1", explaination: "..." }, order: 1 },
      { lotItem: { text: "Step 2", explaination: "..." }, order: 2 },
    ],
    correctLotItems: [
      { text: "Option A", explaination: "Correct because..." },
      { text: "Option D", explaination: "Correct because..." },
    ],
    incorrectLotItems: [
      { text: "Option B", explaination: "Incorrect because..." },
      { text: "Option C", explaination: "Incorrect because..." },
    ],
    correctLotItem: {
      text: "Option A",
      explaination: "This is the correct answer because...",
    },
    text: "What is 2 + 2?",
    type: "SELECT_ONE_IN_LOT",
    isParameterized: faker.datatype.boolean(),
    parameters: [
      { name: "Param1", possibleValues: ["cat", "dog"], type: "string" },
    ],
    hint: "Think about basic addition.",
    timeLimitSeconds: 60,
    points: 5,
  };
}

export function getQuestionControllerDelete200Response() {
  return null;
}

export function getQuestionControllerDelete400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuestionControllerDelete404Response() {
  return {
    message: "Question not found.",
  };
}

export function getQuestionControllerFlagQuestion200Response() {
  return null;
}

export function getQuestionControllerFlagQuestion400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuestionControllerFlagQuestion403Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuestionControllerFlagQuestion404Response() {
  return {
    message: "Question not found.",
  };
}

export function getQuestionControllerResolveFlag200Response() {
  return null;
}

export function getQuestionControllerResolveFlag400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuestionControllerResolveFlag403Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerAddQuestionBank200Response() {
  return null;
}

export function getQuizControllerAddQuestionBank400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerAddQuestionBank404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerEditQuestionBank200Response() {
  return null;
}

export function getQuizControllerEditQuestionBank400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerEditQuestionBank404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerGetAllQuestionBanks200Response() {
  return {
    questionBanks: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      bankId: "60d21b4667d0d8992e610c85",
      count: 10,
      difficulty: ["easy", "medium"],
      tags: ["math", "science"],
      type: "multiple-choice",
    })),
  };
}

export function getQuizControllerGetAllQuestionBanks404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerRemoveQuestionBank200Response() {
  return null;
}

export function getQuizControllerRemoveQuestionBank404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerGetUserMetrices200Response() {
  return {
    _id: "60d21b4667d0d8992e610c01",
    quizId: "60d21b4667d0d8992e610c85",
    userId: "60d21b4667d0d8992e610c01",
    latestAttemptStatus: "ATTEMPTED",
    latestAttemptId: "60d21b4667d0d8992e610c99",
    latestSubmissionResultId: "60d21b4667d0d8992e610c77",
    remainingAttempts: 2,
    attempts: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      attemptId: "60d21b4667d0d8992e610c99",
      submissionResultId: "60d21b4667d0d8992e610c77",
    })),
  };
}

export function getQuizControllerGetUserMetrices400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerGetUserMetrices404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerGetQuizAttempt200Response() {
  return {
    _id: "60d21b4667d0d8992e610c99",
    quizId: "60d21b4667d0d8992e610c85",
    userId: "60d21b4667d0d8992e610c01",
    questionDetails: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      questionId: "60d21b4667d0d8992e610c02",
      parameterMap: { difficulty: "easy", maxScore: 10 },
    })),
    answers: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      questionId: "60d21b4667d0d8992e610c02",
      questionType: "SELECT_ONE_IN_LOT",
      answer: {
        lotItemId: "60d21b4667d0d8992e610c10",
      },
    })),
    createdAt: "2024-06-18T12:00:00.000Z",
    updatedAt: "2024-06-18T12:30:00.000Z",
  };
}

export function getQuizControllerGetQuizAttempt404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerGetQuizSubmission200Response() {
  return {
    _id: "60d21b4667d0d8992e610c77",
    quizId: "60d21b4667d0d8992e610c85",
    userId: "60d21b4667d0d8992e610c01",
    attemptId: "60d21b4667d0d8992e610c99",
    submittedAt: "2024-06-18T12:45:00.000Z",
    gradingResult: {
      totalScore: 8,
      totalMaxScore: 10,
      overallFeedback: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        questionId: "60d21b4667d0d8992e610c02",
        status: "CORRECT",
        score: 5,
        answerFeedback: "Good job! You answered correctly.",
      })),
      gradingStatus: "PASSED",
      gradedAt: "2024-06-18T12:30:00.000Z",
      gradedBy: "Teacher",
    },
  };
}

export function getQuizControllerGetAllSubmissions200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    submissions: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _id: "60d21b4667d0d8992e610c77",
      quizId: "60d21b4667d0d8992e610c85",
      userId: "60d21b4667d0d8992e610c01",
      attemptId: "60d21b4667d0d8992e610c99",
      submittedAt: "2024-06-18T12:45:00.000Z",
      gradingResult: {
        totalScore: 8,
        totalMaxScore: 10,
        overallFeedback: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          questionId: "60d21b4667d0d8992e610c02",
          status: "CORRECT",
          score: 5,
          answerFeedback: "Good job! You answered correctly.",
        })),
        gradingStatus: "PASSED",
        gradedAt: "2024-06-18T12:30:00.000Z",
        gradedBy: "Teacher",
      },
    })),
  }));
}

export function getQuizControllerGetAllSubmissions400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerGetAllSubmissions404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerGetQuizDetails200Response() {
  return {
    _id: "60d21b4667d0d8992e610c85",
    name: "Algebra Quiz",
    description: "A quiz on algebra basics.",
    type: "QUIZ",
    details: {
      questionBankRefs: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        bankId: "60d21b4667d0d8992e610c85",
        count: 10,
        difficulty: ["easy", "medium"],
        tags: ["math", "science"],
        type: "multiple-choice",
      })),
      passThreshold: 0.7,
      maxAttempts: 3,
      quizType: "DEADLINE",
      releaseTime: "2024-06-18T12:00:00.000Z",
      questionVisibility: 5,
      deadline: "2024-06-25T12:00:00.000Z",
      approximateTimeToComplete: "01:30:00",
      allowPartialGrading: true,
      allowHint: faker.datatype.boolean(),
      showCorrectAnswersAfterSubmission: true,
      showExplanationAfterSubmission: true,
      showScoreAfterSubmission: true,
    },
  };
}

export function getQuizControllerGetQuizAnalytics200Response() {
  return {
    totalAttempts: 100,
    submissions: 80,
    passRate: 75,
    averageScore: 7.5,
  };
}

export function getQuizControllerGetQuizPerformance200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    questionId: "60d21b4667d0d8992e610c02",
    correctRate: 80,
    averageScore: 4.2,
  }));
}

export function getQuizControllerGetQuizPerformance400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerGetQuizPerformance404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerGetQuizResults200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    studentId: "60d21b4667d0d8992e610c01",
    attemptId: "60d21b4667d0d8992e610c99",
    score: 9,
    status: "PASSED",
  }));
}

export function getQuizControllerGetQuizResults400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerGetQuizResults404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerUpdateQuizSubmissionScore200Response() {
  return null;
}

export function getQuizControllerUpdateQuizSubmissionScore400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerUpdateQuizSubmissionScore404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerRegradeSubmission200Response() {
  return null;
}

export function getQuizControllerRegradeSubmission400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerRegradeSubmission404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerAddFeedbackToQuestion200Response() {
  return null;
}

export function getQuizControllerAddFeedbackToQuestion400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerAddFeedbackToQuestion404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuizControllerResetAvailableAttempts200Response() {
  return null;
}

export function getQuizControllerResetAvailableAttempts400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getQuizControllerResetAvailableAttempts404Response() {
  return {
    message: "Quiz not found.",
  };
}

export function getQuestionBankControllerCreate200Response() {
  return {
    questionBankId: "60d21b4667d0d8992e610c85",
  };
}

export function getQuestionBankControllerCreate404Response() {
  return {
    message: "Question bank not found.",
  };
}

export function getQuestionBankControllerGetById200Response() {
  return {
    _id: "60d21b4667d0d8992e610c85",
    courseId: "60d21b4667d0d8992e610c85",
    courseVersionId: "60d21b4667d0d8992e610c86",
    questions: ["60d21b4667d0d8992e610c87"],
    tags: ["math", "science"],
    title: "Algebra Basics",
    description: "A collection of algebra questions.",
  };
}

export function getQuestionBankControllerGetById404Response() {
  return {
    message: "Question bank not found.",
  };
}

export function getQuestionBankControllerAddQuestion200Response() {
  return {
    _id: "60d21b4667d0d8992e610c85",
    courseId: "60d21b4667d0d8992e610c85",
    courseVersionId: "60d21b4667d0d8992e610c86",
    questions: ["60d21b4667d0d8992e610c87"],
    tags: ["math", "science"],
    title: "Algebra Basics",
    description: "A collection of algebra questions.",
  };
}

export function getQuestionBankControllerAddQuestion404Response() {
  return {
    message: "Question bank not found.",
  };
}

export function getQuestionBankControllerRemoveQuestion200Response() {
  return {
    _id: "60d21b4667d0d8992e610c85",
    courseId: "60d21b4667d0d8992e610c85",
    courseVersionId: "60d21b4667d0d8992e610c86",
    questions: ["60d21b4667d0d8992e610c87"],
    tags: ["math", "science"],
    title: "Algebra Basics",
    description: "A collection of algebra questions.",
  };
}

export function getQuestionBankControllerRemoveQuestion404Response() {
  return {
    message: "Question bank not found.",
  };
}

export function getQuestionBankControllerReplaceQuestion200Response() {
  return {
    newQuestionId: "60d21b4667d0d8992e610c88",
  };
}

export function getQuestionBankControllerReplaceQuestion404Response() {
  return {
    message: "Question bank not found.",
  };
}

export function getAttemptControllerAttempt200Response() {
  return {
    attemptId: "60d21b4667d0d8992e610c99",
    questionRenderViews: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      parameterMap: { difficulty: "easy", maxScore: 10 },
      lotItems: [
        { _id: "60d21b4667d0d8992e610c01", text: "Option A" },
        { _id: "60d21b4667d0d8992e610c02", text: "Option B" },
      ],
      decimalPrecision: 2,
      text: "What is 2 + 2?",
      type: "SELECT_ONE_IN_LOT",
      isParameterized: faker.datatype.boolean(),
      parameters: [
        { name: "Param1", possibleValues: ["cat", "dog"], type: "string" },
      ],
      hint: "Think about basic addition.",
      timeLimitSeconds: 60,
      points: 5,
    })),
  };
}

export function getAttemptControllerAttempt400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getAttemptControllerAttempt404Response() {
  return {
    message: "No attempt found.",
  };
}

export function getAttemptControllerSave200Response() {
  return null;
}

export function getAttemptControllerSave400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getAttemptControllerSave404Response() {
  return {
    message: "No attempt found.",
  };
}

export function getAttemptControllerSubmit200Response() {
  return {
    totalScore: 8,
    totalMaxScore: 10,
    overallFeedback: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      questionId: "60d21b4667d0d8992e610c02",
      status: "CORRECT",
      score: 5,
      answerFeedback: "Good job! You answered correctly.",
    })),
    gradingStatus: "PASSED",
    gradedAt: "2024-06-18T12:30:00.000Z",
    gradedBy: "admin",
  };
}

export function getAttemptControllerSubmit400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getAttemptControllerSubmit404Response() {
  return {
    message: "No attempt found.",
  };
}

export function getAttemptControllerGetAttempt200Response() {
  return {
    _id: "60d21b4667d0d8992e610c99",
    quizId: "60d21b4667d0d8992e610c85",
    userId: "60d21b4667d0d8992e610c01",
    questionDetails: [{ questionId: "60d21b4667d0d8992e610c02" }],
    answers: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      questionId: "60d21b4667d0d8992e610c02",
      questionType: "SELECT_ONE_IN_LOT",
      answer: {
        lotItemId: "60d21b4667d0d8992e610c10",
      },
    })),
    createdAt: "2024-06-18T12:00:00.000Z",
    updatedAt: "2024-06-18T12:30:00.000Z",
  };
}

export function getAttemptControllerGetAttempt400Response() {
  return {
    message: faker.lorem.words(),
    errors: {
      target: {},
      property: faker.lorem.words(),
      value: {},
      constraints: {},
      children: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        property: faker.lorem.words(),
        constraints: [...new Array(5).keys()]
          .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
      })),
      contexts: {},
    },
  };
}

export function getAttemptControllerGetAttempt404Response() {
  return {
    message: "No attempt found.",
  };
}

export function getGenAiVideoControllerGenerateTranscript200Response() {
  return null;
}

export function getGenAiVideoControllerSegmentTranscript200Response() {
  return null;
}

export function getGenAiVideoControllerGenerateQuestions200Response() {
  return null;
}

export function getGenAiVideoControllerGenerateCourseItemsFromVideo200Response() {
  return null;
}

export function getCourseSettingsControllerCreate201Response() {
  return null;
}

export function getCourseSettingsControllerGet200Response() {
  return null;
}

export function getCourseSettingsControllerUpdateCourseSettings200Response() {
  return null;
}

export function getUserSettingsControllerCreate201Response() {
  return null;
}

export function getUserSettingsControllerGet200Response() {
  return null;
}

export function getUserSettingsControllerUpdateUserSettings200Response() {
  return null;
}
