// This file is auto-generated by @hey-api/openapi-ts

export type User = {
    /**
     * MongoDB Object ID of the user
     */
    _id?: string;
    /**
     * Firebase UID of the user
     */
    firebaseUID: string;
    /**
     * Email address of the user
     */
    email: string;
    /**
     * First name of the user
     */
    firstName: string;
    /**
     * Last name of the user
     */
    lastName: string;
    /**
     * Role of the user
     */
    roles: 'admin' | 'user';
};

export type Course = {
    /**
     * Unique identifier for the course
     */
    _id?: string;
    /**
     * Timestamp when the course was created
     */
    createdAt: string;
    /**
     * Timestamp when the course was last updated
     */
    updatedAt: string;
};

export type Section = {
    /**
     * Unique identifier for the section
     */
    sectionId?: string;
    /**
     * Name of the section
     */
    name: string;
    /**
     * Brief description of what this section covers
     */
    description: string;
    /**
     * String that defines the section order in the module
     */
    order: string;
    /**
     * ID of the items group associated with this section
     */
    itemsGroupId: string;
    /**
     * Timestamp when the section was created
     */
    createdAt: string;
    /**
     * Timestamp when the section was last updated
     */
    updatedAt: string;
};

export type Module = {
    /**
     * Module ID
     */
    moduleId?: string;
    /**
     * Module name
     */
    name: string;
    /**
     * Module overview
     */
    description: string;
    /**
     * Module order key
     */
    order: string;
    /**
     * Sections under this module
     */
    sections: Array<Section>;
    /**
     * Created on
     */
    createdAt: string;
    /**
     * Last updated on
     */
    updatedAt: string;
};

export type CourseVersion = {
    /**
     * Course version ID
     */
    _id?: string;
    /**
     * Associated course ID
     */
    courseId: string;
    /**
     * Version label
     */
    version: string;
    /**
     * Version summary
     */
    description: string;
    /**
     * Modules in this version
     */
    modules: Array<Module>;
    /**
     * Created on
     */
    createdAt: string;
    /**
     * Last updated on
     */
    updatedAt: string;
};

export type DetectorOptionsDto = {
    /**
     * Whether the detector is enabled
     */
    enabled: boolean;
};

export type DetectorSettingsDto = {
    /**
     * The detector type
     */
    detectorName: 'cameraMic' | 'blurDetection' | 'faceCountDetection' | 'handGestureDetection' | 'voiceDetection' | 'virtualBackgroundDetection' | 'rightClickDisabled' | 'faceRecognition';
    /**
     * Configuration options for the detector
     */
    settings: DetectorOptionsDto;
};

export type ProctoringSettingsDto = {
    detectors: Array<DetectorSettingsDto>;
};

export type SettingsDto = {
    proctors: ProctoringSettingsDto;
};

export type CreateCourseSettingsBody = {
    /**
     * ID of the course version
     */
    courseVersionId: string;
    /**
     * Id of the course
     */
    courseId: string;
    settings: SettingsDto;
};

export type ReadCourseSettingsParams = {
    /**
     * ID of the course
     */
    courseId: string;
    /**
     * ID of the course version
     */
    versionId: string;
};

export type AddCourseProctoringParams = {
    /**
     * ID of the course
     */
    courseId: string;
    /**
     * ID of the course version
     */
    versionId: string;
};

export type AddCourseProctoringBody = {
    detectors: Array<DetectorSettingsDto>;
};

export type RemoveCourseProctoringParams = {
    /**
     * ID of the course
     */
    courseId: string;
    /**
     * ID of the course version
     */
    courseVersionId: string;
};

export type RemoveCourseProctoringBody = {
    /**
     * Component to remove from course proctoring
     */
    detectorName: 'cameraMic' | 'blurDetection' | 'faceCountDetection' | 'handGestureDetection' | 'voiceDetection' | 'virtualBackgroundDetection' | 'rightClickDisabled' | 'faceRecognition';
};

export type CreateUserSettingsBody = {
    /**
     * ID of the student
     */
    studentId: string;
    /**
     * ID of the course
     */
    courseId: string;
    /**
     * ID of the course version
     */
    courseVersionId: string;
    settings: SettingsDto;
};

export type ReadUserSettingsParams = {
    /**
     * ID of the student
     */
    studentId: string;
    /**
     * ID of the course
     */
    courseId: string;
    /**
     * ID of the course version
     */
    versionId: string;
};

export type AddUserProctoringParams = {
    /**
     * ID of the student
     */
    studentId: string;
    /**
     * ID of the course
     */
    courseId: string;
    /**
     * ID of the course version
     */
    versionId: string;
};

export type AddUserProctoringBody = {
    detectors: Array<DetectorSettingsDto>;
};

export type RemoveUserProctoringParams = {
    /**
     * ID of the student
     */
    studentId: string;
    /**
     * ID of the course
     */
    courseId: string;
    /**
     * ID of the course version
     */
    courseVersionId: string;
};

export type RemoveUserProctoringBody = {
    /**
     * Component to remove from user proctoring
     */
    detectorName: 'cameraMic' | 'blurDetection' | 'faceCountDetection' | 'handGestureDetection' | 'voiceDetection' | 'virtualBackgroundDetection' | 'rightClickDisabled' | 'faceRecognition';
};

export type SignUpBody = {
    /**
     * Email Address
     * Email address of the user, used as login identifier
     */
    email: string;
    /**
     * Password
     * Password for account authentication (minimum 8 characters). Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
     */
    password: string;
    /**
     * First Name
     * User's first name (alphabetic characters only)
     */
    firstName: string;
    /**
     * Last Name
     * User's last name (alphabetic characters only)
     */
    lastName?: string;
};

export type GoogleSignUpBody = {
    /**
     * Email Address
     * Email address of the user, used as login identifier
     */
    email: string;
    /**
     * First Name
     * User's first name (alphabetic characters only)
     */
    firstName: string;
    /**
     * Last Name
     * User's last name (alphabetic characters only)
     */
    lastName?: string;
};

export type VerifySignUpProviderBody = {
    /**
     * Firebase Auth Token
     * Firebase Auth Token
     */
    token: string;
};

export type ChangePasswordBody = {
    /**
     * New Password
     * New password that meets security requirements.  Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
     */
    newPassword: string;
    /**
     * Confirm New Password
     * Confirmation of the new password (must match exactly). Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
     */
    newPasswordConfirm: string;
};

export type SignUpResponse = {
    /**
     * Unique identifier for the user
     */
    readonly uid: string;
    /**
     * Email address of the registered user
     */
    readonly email: string;
    /**
     * User's first name
     */
    readonly firstName: string;
    /**
     * User's last name
     */
    readonly lastName: string;
};

export type ChangePasswordResponse = {
    /**
     * Indicates the operation was successful
     */
    readonly success: boolean;
    /**
     * Success message
     */
    readonly message: string;
};

export type TokenVerificationResponse = {
    /**
     * Confirmation message for valid token
     */
    readonly message: string;
};

export type AuthErrorResponse = {
    /**
     * The error message
     */
    readonly message: string;
};

export type LoginBody = {
    /**
     * Email Address
     * Email address of the user
     */
    email: string;
    /**
     * Password
     * Password for account authentication
     */
    password: string;
};

export type UserResponse = {
    /**
     * Unique identifier for the user
     */
    _id?: string;
    /**
     * Firebase UID associated with the user
     */
    firebaseUID: string;
    /**
     * Email address of the user
     */
    email: string;
    /**
     * First name of the user
     */
    firstName: string;
    /**
     * Last name of the user
     */
    lastName: string;
    /**
     * Role of the user
     */
    roles: 'admin' | 'user';
};

export type Progress = {
    /**
     * Progress record ID
     */
    _id?: string;
    /**
     * User ID associated with the progress
     */
    userId: string;
    /**
     * Course ID to which this progress belongs
     */
    courseId: string;
    /**
     * Course version ID tracking this progress
     */
    courseVersionId: string;
    /**
     * Current module ID the user is engaged with
     */
    currentModule: string;
    /**
     * Current section ID the user is progressing through
     */
    currentSection: string;
    /**
     * Current item ID the user is viewing or interacting with
     */
    currentItem: string;
    /**
     * Indicates whether the user has completed the course
     */
    completed: boolean;
};

export type Enrollment = {
    /**
     * Enrollment ID
     */
    _id?: string;
    /**
     * User ID
     */
    userId: string;
    /**
     * Course ID
     */
    courseId: string;
    /**
     * Course version ID
     */
    courseVersionId: string;
    /**
     * User role in the course
     */
    role: 'INSTRUCTOR' | 'STUDENT' | 'MANAGER' | 'TA' | 'STAFF';
    /**
     * Enrollment status
     */
    status: 'ACTIVE' | 'INACTIVE' | 'COMPLETED' | 'DROPPED';
    /**
     * Enrollment creation timestamp
     */
    enrollmentDate: string;
};

export type EnrollUserResponse = {
    enrollment: Array<Enrollment>;
    progress: Array<Progress>;
    /**
     * User Role in Enrollment
     */
    role: string;
};

export type EnrolledUserResponse = {
    /**
     * Role assigned to the user in this enrollment
     */
    role: string;
    /**
     * Status of the user in this enrollment
     */
    status: string;
    /**
     * Timestamp when the enrollment was created
     */
    enrollmentDate: string;
};

export type Invite = {
    /**
     * The email address of the person being invited.
     */
    email: string;
    /**
     * The unique identifier of the course the invite is for.
     */
    courseId: string;
    /**
     * The unique identifier of the specific course version for the invite.
     */
    courseVersionId: string;
    isAlreadyEnrolled: boolean;
    isNewUser: boolean;
    /**
     * Accepted At
     * Timestamp when the user accepted the invite
     */
    acceptedAt?: string;
};

export type MessageResponse = {
    /**
     * Invite Message
     */
    message: string;
};

export type InviteIdParams = {
    /**
     * Unique identifier for the invite
     */
    inviteId: string;
};

export type CourseAndVersionId = {
    /**
     * ID of the course to which users are being invited
     */
    courseId: string;
    /**
     * ID of the specific version of the course
     */
    versionId: string;
};

export type EmailInvite = {
    /**
     * Email address of the user to be invited
     */
    email: string;
    /**
     * Role that the user will have in the course
     */
    role: 'INSTRUCTOR' | 'STUDENT' | 'MANAGER' | 'TA' | 'STAFF';
};

export type InviteBody = {
    inviteData: Array<EmailInvite>;
};

export type InviteResult = {
    /**
     * Invite ID
     */
    inviteId: string;
    /**
     * Email of the invited user
     */
    email: string;
    /**
     * Status of the invitation
     */
    inviteStatus: 'ACCEPTED' | 'PENDING' | 'CANCELLED' | 'EMAIL_FAILED' | 'ALREADY_ENROLLED';
    /**
     * Assigned role for the invited user
     */
    role: 'INSTRUCTOR' | 'STUDENT' | 'MANAGER' | 'TA' | 'STAFF';
    /**
     * Course ID related to the invite
     */
    courseId?: string;
    /**
     * Course version ID related to the invite
     */
    courseVersionId?: string;
    /**
     * Date when the invite was accepted
     */
    acceptedAt?: string;
};

export type InviteResponse = {
    /**
     * Array of invite results
     */
    invites: Array<InviteResult>;
};

export type ValidationErrorResponse = {
    /**
     * The object that was validated.
     */
    readonly target: {
        [key: string]: unknown;
    };
    /**
     * The property that failed validation.
     */
    readonly property: string;
    /**
     * The value that failed validation.
     */
    readonly value: {
        [key: string]: unknown;
    };
    /**
     * Constraints that failed validation with error messages.
     */
    readonly constraints: {
        [key: string]: unknown;
    };
    /**
     * Nested validation errors (flattened for documentation)
     */
    readonly children?: Array<{
        property: string;
        constraints: {
            [key: string]: string;
        };
    }>;
    /**
     * Contains all nested validation errors of the property.
     */
    readonly contexts?: {
        [key: string]: unknown;
    };
};

export type DefaultErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
};

export type BadRequestErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
    /**
     * The error details.
     */
    errors: ValidationErrorResponse;
};

export type ForbiddenErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
    /**
     * The error details.
     */
    errors: ValidationErrorResponse;
};

export type InternalServerErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
    /**
     * The error details.
     */
    errors: ValidationErrorResponse;
};

export type GetUserProgressParams = {
    /**
     * User ID to retrieve progress for
     */
    userId: string;
    /**
     * Course ID to retrieve progress for
     */
    courseId: string;
    /**
     * Course version ID to retrieve progress for
     */
    versionId: string;
};

export type StartItemBody = {
    /**
     * ID of the course item to start
     */
    itemId: string;
    /**
     * ID of the module containing the item
     */
    moduleId: string;
    /**
     * ID of the section containing the item
     */
    sectionId: string;
};

export type StartItemParams = {
    /**
     * User ID to track progress for
     */
    userId: string;
    /**
     * Course ID to track progress for
     */
    courseId: string;
    /**
     * Course version ID to track progress for
     */
    versionId: string;
};

export type StartItemResponse = {
    /**
     * Watch item ID for tracking progress
     */
    watchItemId: string;
};

export type StopItemParams = {
    /**
     * User ID to stop tracking progress for
     */
    userId: string;
    /**
     * Course ID to stop tracking progress for
     */
    courseId: string;
    /**
     * Course version ID to stop tracking progress for
     */
    versionId: string;
};

export type StopItemBody = {
    /**
     * Watch item ID used for tracking progress
     */
    watchItemId: string;
    /**
     * ID of the course item to stop tracking
     */
    itemId: string;
    /**
     * ID of the section containing the item
     */
    sectionId: string;
    /**
     * ID of the module containing the item
     */
    moduleId: string;
    /**
     * Attempt ID for quiz tracking
     */
    attemptId?: string;
};

export type UpdateProgressBody = {
    /**
     * ID of the module to update progress for
     */
    moduleId: string;
    /**
     * ID of the section to update progress for
     */
    sectionId: string;
    /**
     * ID of the item to update progress for
     */
    itemId: string;
    /**
     * Watch item ID used for tracking progress
     */
    watchItemId?: string;
    /**
     * ID of the attempt for quiz
     */
    attemptId?: string;
};

export type UpdateProgressParams = {
    /**
     * User ID to update progress for
     */
    userId: string;
    /**
     * Course ID to update progress for
     */
    courseId: string;
    /**
     * Course version ID to update progress for
     */
    versionId: string;
};

export type WatchTimeResponse = {
    /**
     * Unique identifier for the watch time record
     */
    _id?: string;
    /**
     * User ID to track watch time for
     */
    userId: string;
    /**
     * Course ID associated with the watch event
     */
    courseId: string;
    /**
     * Version ID of the course
     */
    courseVersionId: string;
    /**
     * Item ID that is being watched
     */
    itemId: string;
    /**
     * Start time of the watch session
     */
    startTime: string;
    /**
     * End time of the watch session
     */
    endTime: string;
};

export type ResetCourseProgressParams = {
    /**
     * User ID to reset progress for
     */
    userId: string;
    /**
     * Course ID to reset progress for
     */
    courseId: string;
    /**
     * Course version ID to reset progress for
     */
    versionId: string;
};

export type ResetCourseProgressBody = {
    /**
     * Optional module ID to reset progress to
     */
    moduleId?: string;
    /**
     * Optional section ID to reset progress to
     */
    sectionId?: string;
    /**
     * Optional item ID to reset progress to
     */
    itemId?: string;
    /**
     * field to trigger validation error if moduleId is not provided
     */
    readonly invalidFieldsCheck?: string;
    /**
     * field to trigger validation error if sectionId is not provided
     */
    readonly invalidFieldsCheck2?: string;
};

export type ProgressDataResponse = {
    /**
     * Unique identifier for this progress record.
     */
    readonly _id: string;
    /**
     * MongoDB ObjectId of the user associated with this progress record.
     */
    userId: string;
    /**
     * MongoDB ObjectId of the course the user is progressing through.
     */
    courseId: string;
    /**
     * MongoDB ObjectId of the specific version of the course being progressed through.
     */
    courseVersionId: string;
    /**
     * MongoDB ObjectId of the current module the user is on.
     */
    currentModule: string;
    /**
     * MongoDB ObjectId of the current section the user is on.
     */
    currentSection: string;
    /**
     * MongoDB ObjectId of the current item (e.g., lecture, quiz) the user is on.
     */
    currentItem: string;
    /**
     * Boolean flag indicating whether the user has completed the course.
     */
    completed: boolean;
};

export type CompletedProgressResponse = {
    /**
     * Indicates whether the course has been completed
     */
    readonly completed: boolean;
    /**
     * Percentage of course completion
     */
    readonly percentCompleted: number;
    /**
     * Total number of items in the course
     */
    readonly totalItems: number;
    /**
     * Total number of completed items in the course
     */
    readonly completedItems: number;
};

export type ProgressNotFoundErrorResponse = {
    /**
     * Error message indicating progress not found
     */
    readonly message: string;
};

export type WatchTimeParams = {
    /**
     * user ID to get watch time for
     */
    userId: string;
    /**
     * Item ID to get watch time for
     */
    itemId: string;
};

export type WatchTimeBody = {
    /**
     * Course ID to get watch time for
     */
    courseId?: string;
    /**
     * Course version ID to get watch time for
     */
    versionId?: string;
};

export type EnrollmentParams = {
    /**
     * User ID of the student to enroll
     */
    userId: string;
    /**
     * ID of the course to enroll in
     */
    courseId: string;
    /**
     * ID of the specific course version to enroll in
     */
    versionId: string;
};

export type EnrollmentBody = {
    /**
     * Role of the user
     */
    role: 'INSTRUCTOR' | 'STUDENT' | 'MANAGER' | 'TA' | 'STAFF';
};

export type EnrollmentDataResponse = {
    /**
     * Unique identifier for the enrollment record
     */
    readonly _id: string;
    /**
     * User object associated with this enrollment
     */
    user: {
        [key: string]: unknown;
    };
    /**
     * User ID associated with this enrollment
     */
    userId: string;
    /**
     * Course ID associated with this enrollment
     */
    courseId: string;
    /**
     * Course version ID associated with this enrollment
     */
    courseVersionId: string;
    /**
     * Role of the user
     */
    role: 'INSTRUCTOR' | 'STUDENT';
    /**
     * Status of the enrollment
     */
    status: 'active' | 'inactive';
    /**
     * Date when the user was enrolled
     */
    enrollmentDate: string;
};

export type EnrollUserResponseData = {
    /**
     * Enrollment data for the user
     */
    enrollment: EnrollmentDataResponse;
    /**
     * Progress data for the user
     */
    progress: ProgressDataResponse;
};

export type EnrolledUserResponseData = {
    /**
     * Role of the user in the course
     */
    role: 'INSTRUCTOR' | 'STUDENT';
    /**
     * Status of the enrollment
     */
    status: 'active' | 'inactive';
    /**
     * Date when the user was enrolled
     */
    enrollmentDate: string;
};

export type EnrollmentResponse = {
    /**
     * Total number of enrollment records available across all pages.
     */
    totalDocuments: number;
    /**
     * Total number of pages based on the current pagination settings.
     */
    totalPages: number;
    /**
     * The current page number of the paginated enrollment response.
     */
    currentPage: number;
    /**
     * List of enrollment records for the current page.
     */
    enrollments: Array<EnrollmentDataResponse>;
};

export type CourseVersionEnrollmentResponse = {
    /**
     * Array of enrollment data for the course version
     */
    enrollments: Array<EnrollmentDataResponse>;
};

export type EnrollmentNotFoundErrorResponse = {
    /**
     * Error message indicating the enrollment was not found
     */
    message: string;
};

export type GetUserParams = {
    /**
     * User ID of the person
     */
    userId: string;
};

export type GetUserResponse = {
    /**
     * Unique identifier for the user in the database
     */
    readonly _id: string;
    /**
     * Firebase UID of the user
     */
    readonly firebaseUID: string;
    /**
     * Email address of the user
     */
    readonly email: string;
    /**
     * User's first name
     */
    readonly firstName: string;
    /**
     * User's last name
     */
    readonly lastName?: string;
};

export type EditUserBody = {
    /**
     * User's first name
     */
    readonly firstName: string;
    /**
     * User's last name
     */
    readonly lastName: string;
};

export type UserNotFoundErrorResponse = {
    /**
     * Error message indicating user was not found
     */
    readonly message: string;
};

export type CourseBody = {
    /**
     * Name of the course
     */
    name: string;
    /**
     * Description of the course
     */
    description: string;
};

export type CourseIdParams = {
    /**
     * Object ID of the course
     */
    courseId: string;
};

export type CourseDataResponse = {
    /**
     * Course ID
     */
    readonly _id?: string;
    /**
     * Course name
     */
    name: string;
    /**
     * Course description
     */
    description: string;
    /**
     * Version IDs
     */
    readonly versions: Array<string>;
    /**
     * Instructor IDs
     */
    readonly instructors: Array<string>;
    /**
     * Created timestamp
     */
    readonly createdAt: string;
    /**
     * Last updated timestamp
     */
    readonly updatedAt: string;
};

export type CourseNotFoundErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
};

export type CreateCourseVersionBody = {
    /**
     * The version label or identifier (e.g., v1.0, Fall 2025)
     */
    version: string;
    /**
     * A brief description of the course version
     */
    description: string;
};

export type CreateCourseVersionParams = {
    /**
     * ID of the course to attach the new version to
     */
    courseId: string;
};

export type ReadCourseVersionParams = {
    /**
     * ID of the course version to retrieve
     */
    versionId: string;
};

export type DeleteCourseVersionResponse = {
    /**
     * Success message after deletion
     */
    message: string;
};

export type DeleteCourseVersionParams = {
    /**
     * ID of the course version to delete
     */
    versionId: string;
    /**
     * ID of the course to which the version belongs
     */
    courseId: string;
};

export type CourseVersionDataResponse = {
    /**
     * ID of the course version
     */
    readonly id?: string;
};

export type CourseVersionNotFoundErrorResponse = {
    /**
     * Error message
     */
    readonly message?: string;
};

export type CreateCourseVersionResponse = {
    version?: CourseVersion;
};

export type VideoDetailsPayloadValidator = {
    /**
     * Public video URL (e.g., YouTube or Vimeo link)
     */
    URL: string;
    /**
     * Start time of the video clip in HH:MM:SS format
     */
    startTime: string;
    /**
     * End time of the video clip in HH:MM:SS format
     */
    endTime: string;
    /**
     * Points assigned to the video interaction
     */
    points: number;
};

export type QuizDetailsPayloadValidator = {
    /**
     * Minimum percentage required to pass, between 0 and 1
     */
    passThreshold: number;
    /**
     * Maximum number of attempts allowed for the quiz, -1 for unlimited
     */
    maxAttempts: number;
    /**
     * Type of quiz: DEADLINE or NO_DEADLINE
     */
    quizType: 'DEADLINE' | 'NO_DEADLINE';
    /**
     * Approximate time to complete the quiz in HH:MM:SS format
     */
    approximateTimeToComplete: string;
    /**
     * Whether to allow partial grading for questions, particularly for MSQ/SML type of questions.
     */
    allowPartialGrading: boolean;
    /**
     * Whether to allow students to see the hints for questions
     */
    allowHint: boolean;
    /**
     * Whether to return and show correct answers after successful submission of an attempt
     */
    showCorrectAnswersAfterSubmission: boolean;
    /**
     * Whether to return and show explanations for correct answers after successful submission of an attempt
     */
    showExplanationAfterSubmission: boolean;
    /**
     * Whether to return and show score after successful submission of an attempt
     */
    showScoreAfterSubmission: boolean;
    /**
     * Number of quiz questions visible to students in an attempt
     */
    questionVisibility: number;
    /**
     * ISO date string representing quiz release time
     */
    releaseTime: string;
    /**
     * ISO date string for quiz deadline
     */
    deadline?: string;
};

export type BlogDetailsPayloadValidator = {
    tags?: '' | unknown;
    content: string;
    points: string;
    estimatedReadTimeInMinutes: string;
};

export type CreateItemBody = {
    /**
     * Title of the item
     */
    name: string;
    /**
     * Description of the item
     */
    description: string;
    /**
     * Place item after this item ID
     */
    afterItemId?: string;
    /**
     * Place item before this item ID
     */
    beforeItemId?: string;
    /**
     * Type of the item: VIDEO, BLOG, or QUIZ
     */
    type: 'VIDEO' | 'BLOG' | 'QUIZ';
    /**
     * Details specific to video items
     */
    videoDetails?: VideoDetailsPayloadValidator;
    /**
     * Details specific to blog items
     */
    blogDetails?: BlogDetailsPayloadValidator;
    /**
     * Details specific to quiz items
     */
    quizDetails?: QuizDetailsPayloadValidator;
};

export type UpdateItemBody = {
    /**
     * Title of the item
     */
    name: string;
    /**
     * Description of the item
     */
    description: string;
    /**
     * Place item after this item ID
     */
    afterItemId?: string;
    /**
     * Place item before this item ID
     */
    beforeItemId?: string;
    /**
     * Type of the item: VIDEO, BLOG, or QUIZ
     */
    type: 'VIDEO' | 'BLOG' | 'QUIZ';
    /**
     * Details specific to video items
     */
    videoDetails?: VideoDetailsPayloadValidator;
    /**
     * Details specific to blog items
     */
    blogDetails?: BlogDetailsPayloadValidator;
    /**
     * Details specific to quiz items
     */
    quizDetails?: QuizDetailsPayloadValidator;
};

export type MoveItemBody = {
    /**
     * Move the item after this item ID
     */
    afterItemId?: string;
    /**
     * Move the item before this item ID
     */
    beforeItemId?: string;
};

export type VersionModuleSectionItemParams = {
    /**
     * ID of the course version
     */
    versionId: string;
    /**
     * ID of the module
     */
    moduleId: string;
    /**
     * ID of the section
     */
    sectionId: string;
    /**
     * ID of the item
     */
    itemId: string;
};

export type DeleteItemParams = {
    /**
     * ID of the items group containing the item
     */
    itemsGroupId: string;
    /**
     * ID of the item to delete
     */
    itemId: string;
};

export type GetItemParams = {
    /**
     * ID of the course in which user is enrolled
     */
    courseId: string;
    /**
     * ID of the course version containing the item
     */
    versionId: string;
    /**
     * ID of the item
     */
    itemId: string;
};

export type ItemNotFoundErrorResponse = {
    /**
     * The error message
     */
    readonly message: string;
};

export type ItemRefResponse = {
    /**
     * The unique identifier of the item
     */
    readonly _id?: string;
    /**
     * The name of the item
     */
    type: 'VIDEO' | 'QUIZ' | 'BLOG';
    /**
     * The order of the item
     */
    readonly order: string;
};

export type ItemsGroupResponse = {
    /**
     * The unique identifier of the items group
     */
    readonly _id?: string;
    /**
     * The list of items in the group
     */
    readonly items: Array<ItemRefResponse>;
    /**
     * The ID of the section to which this items group belongs
     */
    readonly sectionId: string;
};

export type GetItemResponse = {
    /**
     * The version Id
     */
    readonly versionId: string;
    /**
     * The item Id
     */
    readonly itemId: string;
};

export type ItemDataResponse = {
    /**
     * The item data
     */
    itemsGroup: ItemsGroupResponse;
    /**
     * The updated version data (when applicable)
     */
    version?: CourseVersion;
    /**
     * The Created Item
     */
    readonly createdItem?: {
        [key: string]: unknown;
    };
};

export type DeletedItemResponse = {
    /**
     * The deleted item id
     */
    readonly deletedItemId: string;
    /**
     * The updated items group after deletion
     */
    updatedItemsGroup: ItemsGroupResponse;
};

export type CreateModuleBody = {
    /**
     * Name/title of the module
     */
    name: string;
    /**
     * Detailed description of the module content
     */
    description: string;
    /**
     * Position the new module after this module ID
     */
    afterModuleId?: string;
    /**
     * Position the new module before this module ID
     */
    beforeModuleId?: string;
};

export type UpdateModuleBody = {
    /**
     * Updated name of the module
     */
    name: string;
    /**
     * Updated description of the module content
     */
    description: string;
};

export type MoveModuleBody = {
    /**
     * Move the module after this module ID
     */
    afterModuleId?: string;
    /**
     * Move the module before this module ID
     */
    beforeModuleId?: string;
};

export type CreateModuleParams = {
    /**
     * ID of the course version to which the module will be added
     */
    versionId: string;
};

export type VersionModuleParams = {
    /**
     * ID of the course version containing the module
     */
    versionId: string;
    /**
     * ID of the module to be updated
     */
    moduleId: string;
};

export type ModuleDataResponse = {
    /**
     * The updated course version data containing modules
     */
    version: CourseVersion;
};

export type ModuleNotFoundErrorResponse = {
    /**
     * The error message
     */
    readonly message: string;
};

export type ModuleDeletedResponse = {
    /**
     * Deletion confirmation message
     */
    readonly message: string;
};

export type CreateSectionBody = {
    /**
     * Name/title of the section
     */
    name: string;
    /**
     * Description or purpose of the section
     */
    description: string;
    /**
     * Optional: Place the new section after this section ID
     */
    afterSectionId?: string;
    /**
     * Optional: Place the new section before this section ID
     */
    beforeSectionId?: string;
};

export type UpdateSectionBody = {
    /**
     * Updated name of the section
     */
    name: string;
    /**
     * Updated description of the section
     */
    description: string;
};

export type MoveSectionBody = {
    /**
     * Move the section after this section ID
     */
    afterSectionId?: string;
    /**
     * Move the section before this section ID
     */
    beforeSectionId?: string;
};

export type VersionModuleSectionParams = {
    /**
     * ID of the course version containing the module
     */
    versionId: string;
    /**
     * ID of the module containing the section
     */
    moduleId: string;
    /**
     * ID of the section
     */
    sectionId: string;
};

export type SectionDataResponse = {
    /**
     * The updated course version data containing the section
     */
    readonly version: {
        [key: string]: unknown;
    };
};

export type SectionNotFoundErrorResponse = {
    /**
     * The error message
     */
    readonly message: string;
};

export type SectionDeletedResponse = {
    /**
     * Success message for deleted section
     */
    readonly message: string;
};

export type QuestionParameter = {
    /**
     * Name of the parameter
     */
    name: string;
    /**
     * Possible values for the parameter
     */
    possibleValues: Array<string>;
    /**
     * Type of the parameter
     */
    type: 'number' | 'string';
};

export type LotItem = {
    /**
     * Text of the lot item
     */
    text: string;
    /**
     * Explanation for the lot item
     */
    explaination: string;
};

export type LotOrder = {
    /**
     * Lot item to be ordered
     */
    lotItem: LotItem;
    /**
     * Order of the lot item
     */
    order: number;
};

export type Question = {
    /**
     * Text of the question
     */
    text: string;
    /**
     * Type of the question
     */
    type: 'SELECT_ONE_IN_LOT' | 'SELECT_MANY_IN_LOT' | 'ORDER_THE_LOTS' | 'NUMERIC_ANSWER_TYPE' | 'DESCRIPTIVE';
    /**
     * Whether the question is parameterized
     */
    isParameterized: boolean;
    /**
     * Parameters for the question
     */
    parameters: Array<QuestionParameter>;
    /**
     * Hint for the question
     */
    hint: string;
    /**
     * Time limit for the question in seconds
     */
    timeLimitSeconds: number;
    /**
     * Points for the question
     */
    points: number;
};

export type SolSolution = {
    /**
     * Incorrect lot items
     */
    incorrectLotItems: Array<LotItem>;
    /**
     * Correct lot item
     */
    correctLotItem: LotItem;
};

export type SmlSolution = {
    /**
     * Incorrect lot items
     */
    incorrectLotItems: Array<LotItem>;
    /**
     * Correct lot items
     */
    correctLotItems: Array<LotItem>;
};

export type OtlSolution = {
    /**
     * Ordering of lot items
     */
    ordering: Array<LotOrder>;
};

export type NatSoltion = {
    /**
     * Decimal precision for the answer
     */
    decimalPrecision: number;
    /**
     * Upper limit for the answer
     */
    upperLimit: number;
    /**
     * Lower limit for the answer
     */
    lowerLimit: number;
    /**
     * Value of the answer (optional)
     */
    value?: number;
    /**
     * Expression for the answer (optional)
     */
    expression?: string;
};

export type DesSolution = {
    /**
     * Descriptive solution text
     */
    solutionText: string;
};

export type QuestionBody = {
    /**
     * Question object
     */
    question: Question;
    /**
     * Solution object for the question
     */
    solution: SolSolution;
};

export type QuestionResponse = {
    /**
     * Question ID
     */
    _id: string;
    /**
     * Solution explanation
     */
    solutionText?: string;
    /**
     * Answer precision (decimal places)
     */
    decimalPrecision?: number;
    /**
     * Answer upper limit
     */
    upperLimit?: number;
    /**
     * Answer lower limit
     */
    lowerLimit?: number;
    /**
     * Expected answer value
     */
    value?: number;
    /**
     * Expected answer expression
     */
    expression?: string;
    /**
     * Correct item order
     */
    ordering?: Array<LotOrder>;
    /**
     * List of correct items
     */
    correctLotItems?: Array<LotItem>;
    /**
     * List of incorrect items
     */
    incorrectLotItems?: Array<LotItem>;
    /**
     * Single correct item
     */
    correctLotItem?: LotItem;
    /**
     * Text of the question
     */
    text: string;
    /**
     * Type of the question
     */
    type: 'SELECT_ONE_IN_LOT' | 'SELECT_MANY_IN_LOT' | 'ORDER_THE_LOTS' | 'NUMERIC_ANSWER_TYPE' | 'DESCRIPTIVE';
    /**
     * Whether the question is parameterized
     */
    isParameterized: boolean;
    /**
     * Parameters for the question
     */
    parameters: Array<QuestionParameter>;
    /**
     * Hint for the question
     */
    hint: string;
    /**
     * Time limit for the question in seconds
     */
    timeLimitSeconds: number;
    /**
     * Points for the question
     */
    points: number;
};

export type QuestionId = {
    /**
     * Question ID
     */
    questionId: string;
};

export type QuestionNotFoundErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
};

export type FlagQuestionBody = {
    /**
     * Reason for flagging the question
     */
    reason: string;
    /**
     * course id for the question
     */
    courseId?: string;
    /**
     * version id for the question
     */
    versionId?: string;
};

export type FlagId = {
    /**
     * ID of the flag to resolve
     */
    flagId: string;
};

export type ResolveFlagBody = {
    /**
     * Status to set for the flag
     */
    status: 'RESOLVED' | 'REJECTED';
};

export type CreateQuestionBankBody = {
    /**
     * ID of the course
     */
    courseId?: string;
    /**
     * ID of the course version
     */
    courseVersionId?: string;
    /**
     * Array of question IDs
     */
    questions?: Array<string>;
    /**
     * Tags for the question bank
     */
    tags?: Array<string>;
    /**
     * Title of the question bank
     */
    title: string;
    /**
     * Description of the question bank
     */
    description?: string;
};

export type GetQuestionBankByIdParams = {
    /**
     * ID of the question bank
     */
    questionBankId: string;
};

export type QuestionBankAndQuestionParams = {
    /**
     * ID of the question bank
     */
    questionBankId: string;
    /**
     * ID of the question
     */
    questionId: string;
};

export type CreateQuestionBankResponse = {
    /**
     * Question bank ID
     */
    questionBankId: string;
};

export type QuestionBankResponse = {
    /**
     * Question bank ID
     */
    _id: string;
    /**
     * Associated course ID
     */
    courseId?: string;
    /**
     * Associated course version ID
     */
    courseVersionId?: string;
    /**
     * List of question IDs in the bank
     */
    questions?: Array<string>;
    /**
     * Tags related to the question bank
     */
    tags?: Array<string>;
    /**
     * Question bank title
     */
    title: string;
    /**
     * Short description of the question bank
     */
    description: string;
};

export type ReplaceQuestionResponse = {
    /**
     * New Question Id
     */
    newQuestionId: string;
};

export type QuestionBankNotFoundErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
};

export type QuestionBankRef = {
    /**
     * ID of the question bank
     */
    bankId: string;
    /**
     * How many questions to pick
     */
    count: number;
    /**
     * Optional filter for question difficulty
     */
    difficulty?: Array<string>;
    /**
     * Optional filter for question tags
     */
    tags?: Array<string>;
    /**
     * Optional question type filter
     */
    type?: string;
};

export type QuestionAnswerFeedback = {
    /**
     * Question ID
     */
    questionId: string;
    /**
     * Answer status
     */
    status: 'CORRECT' | 'INCORRECT' | 'PARTIAL';
    /**
     * Score awarded
     */
    score: number;
    /**
     * Answer feedback
     */
    answerFeedback?: string;
};

export type CreateAttemptParams = {
    /**
     * ID of the quiz
     */
    quizId: string;
};

export type SaveAttemptParams = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the attempt
     */
    attemptId: string;
};

export type SubmitAttemptParams = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the attempt
     */
    attemptId: string;
};

export type GetAttemptResponse = {
    /**
     * Attempt ID
     */
    _id: string;
    /**
     * Quiz ID
     */
    quizId: string;
    /**
     * User ID
     */
    userId: string;
    /**
     * Details of questions in the attempt
     */
    questionDetails: Array<QuestionDetails>;
    /**
     * Submitted answers
     */
    answers?: Array<QuestionAnswer>;
    /**
     * Attempt creation time
     */
    createdAt: string;
    /**
     * Last update time
     */
    updatedAt: string;
};

export type SolAnswer = {
    /**
     * ID of the selected lot item
     */
    lotItemId: string;
};

export type SmlAnswer = {
    /**
     * IDs of the selected lot items
     */
    lotItemIds: Array<string>;
};

export type Order = {
    /**
     * Order of the lot item
     */
    order: number;
    /**
     * ID of the lot item
     */
    lotItemId: string;
};

export type OtlAnswer = {
    /**
     * Orderings of lot items
     */
    orders: Array<Order>;
};

export type NatAnswer = {
    /**
     * Numeric answer value
     */
    value: number;
};

export type DesAnswer = {
    /**
     * Descriptive answer text
     */
    answerText: string;
};

export type QuestionAnswer = {
    /**
     * ID of the question
     */
    questionId: string;
    /**
     * Type of the question
     */
    questionType: 'SELECT_ONE_IN_LOT' | 'SELECT_MANY_IN_LOT' | 'ORDER_THE_LOTS' | 'NUMERIC_ANSWER_TYPE' | 'DESCRIPTIVE';
    /**
     * Answer for the question
     */
    answer: SolAnswer;
};

export type QuestionDetails = {
    /**
     * ID of the question
     */
    questionId: string;
    /**
     * Parameter map for the question
     */
    parameterMap?: {
        [key: string]: string | number;
    };
};

export type QuestionAnswersBody = {
    /**
     * Array of answers for the quiz
     */
    answers: Array<QuestionAnswer>;
};

/**
 * Map of string keys to string or number values
 */
export type ParameterMapValidator = {
    __dummy?: unknown;
    [key: string]: (string | number) | unknown | undefined;
};

/**
 * A lot item used for rendering (excludes explanation)
 */
export type LotItemRenderViewValidator = {
    /**
     * Mongo ID of the item
     */
    _id?: string;
    /**
     * Text for the item
     */
    text: string;
};

export type QuestionRenderView = {
    /**
     * Dynamic parameters for the question
     */
    parameterMap?: ParameterMapValidator;
    /**
     * Options to display for the question
     */
    lotItems?: Array<LotItemRenderViewValidator>;
    /**
     * Allowed decimal places for numeric input
     */
    decimalPrecision?: number;
    /**
     * Text of the question
     */
    text: string;
    /**
     * Type of the question
     */
    type: 'SELECT_ONE_IN_LOT' | 'SELECT_MANY_IN_LOT' | 'ORDER_THE_LOTS' | 'NUMERIC_ANSWER_TYPE' | 'DESCRIPTIVE';
    /**
     * Whether the question is parameterized
     */
    isParameterized: boolean;
    /**
     * Parameters for the question
     */
    parameters: Array<QuestionParameter>;
    /**
     * Hint for the question
     */
    hint: string;
    /**
     * Time limit for the question in seconds
     */
    timeLimitSeconds: number;
    /**
     * Points for the question
     */
    points: number;
};

export type CreateAttemptResponse = {
    /**
     * Attempt ID
     */
    attemptId: string;
    /**
     * Rendered questions for this attempt
     */
    questionRenderViews: Array<QuestionRenderView>;
};

export type SubmitAttemptResponse = {
    /**
     * Score obtained
     */
    totalScore?: number;
    /**
     * Maximum score
     */
    totalMaxScore?: number;
    /**
     * Question-wise feedback
     */
    overallFeedback: Array<QuestionAnswerFeedback>;
    /**
     * Result status
     */
    gradingStatus: 'PENDING' | 'PASSED' | 'FAILED';
    /**
     * Grading timestamp
     */
    gradedAt?: string;
    /**
     * Evaluator name
     */
    gradedBy?: string;
};

export type QuizIdParam = {
    /**
     * ID of the quiz
     */
    quizId: string;
};

export type QuizAttemptParam = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the attempt
     */
    attemptId: string;
};

export type QuizSubmissionParam = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the submission
     */
    submissionId: string;
};

export type UpdateQuizSubmissionParam = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the submission
     */
    submissionId: string;
    /**
     * Score to update
     */
    score: number;
};

export type RemoveQuestionBankParams = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the question bank
     */
    questionBankId: string;
};

export type AddFeedbackParams = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the submission
     */
    submissionId: string;
    /**
     * ID of the question
     */
    questionId: string;
};

export type GetUserMatricesParams = {
    /**
     * ID of the quiz
     */
    quizId: string;
    /**
     * ID of the user
     */
    userId: string;
};

export type AddQuestionBankBody = {
    /**
     * ID of the question bank
     */
    bankId: string;
    /**
     * Number of questions to pick
     */
    count: number;
    /**
     * Difficulty filters
     */
    difficulty?: Array<string>;
    /**
     * Tags filters
     */
    tags?: Array<string>;
};

export type EditQuestionBankBody = {
    /**
     * ID of the question bank
     */
    bankId: string;
    /**
     * Number of questions to pick
     */
    count: number;
    /**
     * Difficulty filters
     */
    difficulty?: Array<string>;
    /**
     * Tags filters
     */
    tags?: Array<string>;
};

export type RegradeSubmissionBody = {
    /**
     * Total score after regrading
     */
    totalScore?: number;
    /**
     * Maximum possible score after regrading
     */
    totalMaxScore?: number;
    /**
     * Overall feedback after regrading
     */
    overallFeedback?: Array<QuestionAnswerFeedback>;
    /**
     * Grading status after regrading
     */
    gradingStatus: 'PENDING' | 'PASSED' | 'FAILED';
};

export type AddFeedbackBody = {
    /**
     * Feedback text
     */
    feedback: string;
};

export type AttemptDetails = {
    /**
     * ID of the attempt
     */
    attemptId: string;
    /**
     * ID of the submission result
     */
    submissionResultId?: string;
};

export type UserQuizMetricsResponse = {
    /**
     * Metrics record ID
     */
    _id?: string;
    /**
     * Quiz ID
     */
    quizId: string;
    /**
     * User ID
     */
    userId: string;
    /**
     * Latest attempt status
     */
    latestAttemptStatus: 'ATTEMPTED' | 'SUBMITTED';
    /**
     * Latest attempt ID
     */
    latestAttemptId?: string;
    /**
     * Latest submission result ID
     */
    latestSubmissionResultId?: string;
    /**
     * Remaining attempts
     */
    remainingAttempts: number;
    /**
     * Quiz attempt history
     */
    attempts: Array<AttemptDetails>;
};

export type QuizAttemptResponse = {
    /**
     * Attempt ID
     */
    _id?: string;
    /**
     * Quiz ID
     */
    quizId: string;
    /**
     * User ID
     */
    userId: string;
    /**
     * Questions in the quiz
     */
    questionDetails: Array<QuestionDetails>;
    /**
     * Submitted answers
     */
    answers?: Array<QuestionAnswer>;
    /**
     * Created on
     */
    createdAt: string;
    /**
     * Last updated on
     */
    updatedAt: string;
};

export type GradingResult = {
    /**
     * Score awarded
     */
    totalScore?: number;
    /**
     * Maximum possible score
     */
    totalMaxScore?: number;
    /**
     * Feedback per question
     */
    overallFeedback?: Array<QuestionAnswerFeedback>;
    /**
     * Grading status
     */
    gradingStatus: 'PENDING' | 'PASSED' | 'FAILED';
    /**
     * Grading timestamp
     */
    gradedAt?: string;
    /**
     * Graded by
     */
    gradedBy?: string;
};

export type QuizSubmissionResponse = {
    /**
     * Submission ID
     */
    _id?: string;
    /**
     * Quiz ID
     */
    quizId: string;
    /**
     * User ID
     */
    userId: string;
    /**
     * Attempt ID
     */
    attemptId: string;
    /**
     * Submitted on
     */
    submittedAt: string;
    /**
     * Grading result
     */
    gradingResult?: GradingResult;
};

export type QuizDetails = {
    /**
     * List of question banks referenced in the quiz
     */
    questionBankRefs: Array<QuestionBankRef>;
    /**
     * Passing threshold for the quiz
     */
    passThreshold: number;
    /**
     * Maximum number of attempts allowed
     */
    maxAttempts: number;
    /**
     * Type of the quiz
     */
    quizType: 'DEADLINE' | 'NO_DEADLINE';
    /**
     * Release time for the quiz
     */
    releaseTime: string;
    /**
     * Number of questions visible to the user at a time
     */
    questionVisibility: number;
    /**
     * Deadline for the quiz, only applicable for DEADLINE type
     */
    deadline?: string;
    /**
     * Approximate time to complete the quiz
     */
    approximateTimeToComplete: string;
    /**
     * If true, allows partial grading for SML questions
     */
    allowPartialGrading: boolean;
    /**
     * If true, allows users to use hints for questions
     */
    allowHint: boolean;
    /**
     * If true, shows correct answers after submission
     */
    showCorrectAnswersAfterSubmission: boolean;
    /**
     * If true, shows explanation after submission
     */
    showExplanationAfterSubmission: boolean;
    /**
     * If true, shows score after submission
     */
    showScoreAfterSubmission: boolean;
};

export type QuizDetailsResponse = {
    /**
     * ID of the quiz
     */
    _id?: string;
    /**
     * Name of the quiz
     */
    name: string;
    /**
     * Description of the quiz
     */
    description: string;
    /**
     * Type of the quiz
     */
    type: 'VIDEO' | 'QUIZ' | 'BLOG';
    /**
     * Quiz details
     */
    details?: QuizDetails;
};

export type QuizAnalyticsResponse = {
    /**
     * Total attempts
     */
    totalAttempts: number;
    /**
     * Total submissions
     */
    submissions: number;
    /**
     * Pass percentage
     */
    passRate: number;
    /**
     * Average score
     */
    averageScore: number;
};

export type QuizPerformanceResponse = {
    /**
     * Question ID
     */
    questionId: string;
    /**
     * Correct response rate (%)
     */
    correctRate: number;
    /**
     * Average question score
     */
    averageScore: number;
};

export type QuizResultsResponse = {
    /**
     * Student ID
     */
    studentId: string;
    /**
     * Attempt ID
     */
    attemptId: string;
    /**
     * Attempt score
     */
    score: number;
    /**
     * Grading status
     */
    status: 'PENDING' | 'PASSED' | 'FAILED';
};

export type SubmissionResponse = {
    /**
     * Submission ID
     */
    _id: string;
    /**
     * Quiz ID
     */
    quizId: string;
    /**
     * User ID
     */
    userId: string;
    /**
     * Attempt ID
     */
    attemptId: string;
    /**
     * Submitted on
     */
    submittedAt: string;
    /**
     * Grading result
     */
    gradingResult?: GradingResult;
};

export type GetAllSubmissionsResponse = {
    /**
     * Submissions list
     */
    submissions: Array<SubmissionResponse>;
};

export type QuestionBankRefResponse = {
    /**
     * ID of the question bank
     */
    bankId: string;
    /**
     * Number of questions to pick
     */
    count: number;
    /**
     * Difficulty filters
     */
    difficulty?: Array<string>;
    /**
     * Tags filters
     */
    tags?: Array<string>;
    /**
     * Type filter
     */
    type?: string;
};

export type AttemptNotFoundErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
};

export type QuizNotFoundErrorResponse = {
    /**
     * The error message.
     */
    readonly message: string;
};

export type GetAllQuestionBanksResponse = {
    /**
     * List of all question banks
     */
    questionBanks: Array<QuestionBankRef>;
};

export type InviteControllerGetInvitesForCourseVersionData = {
    body?: never;
    path: {
        /**
         * ID of the course to which users are being invited
         */
        courseId: string;
        /**
         * ID of the specific version of the course
         */
        versionId: string;
    };
    query?: never;
    url: '/api/notifications/invite/courses/{courseId}/versions/{versionId}';
};

export type InviteControllerGetInvitesForCourseVersionResponses = {
    /**
     * List of invites for the course version
     */
    200: InviteResponse;
};

export type InviteControllerGetInvitesForCourseVersionResponse = InviteControllerGetInvitesForCourseVersionResponses[keyof InviteControllerGetInvitesForCourseVersionResponses];

export type InviteControllerInviteUsersData = {
    /**
     * InviteBody
     */
    body?: InviteBody;
    path: {
        /**
         * ID of the course to which users are being invited
         */
        courseId: string;
        /**
         * ID of the specific version of the course
         */
        versionId: string;
    };
    query?: never;
    url: '/api/notifications/invite/courses/{courseId}/versions/{versionId}';
};

export type InviteControllerInviteUsersErrors = {
    /**
     * Invalid input data
     */
    400: BadRequestErrorResponse;
};

export type InviteControllerInviteUsersError = InviteControllerInviteUsersErrors[keyof InviteControllerInviteUsersErrors];

export type InviteControllerInviteUsersResponses = {
    /**
     * Invite users to a course version
     */
    200: InviteResponse;
};

export type InviteControllerInviteUsersResponse = InviteControllerInviteUsersResponses[keyof InviteControllerInviteUsersResponses];

export type InviteControllerProcessInvitesData = {
    body?: never;
    path: {
        /**
         * Unique identifier for the invite
         */
        inviteId: string;
    };
    query?: never;
    url: '/api/notifications/invite/{inviteId}';
};

export type InviteControllerProcessInvitesResponses = {
    /**
     * Invite processed successfully
     */
    200: MessageResponse;
};

export type InviteControllerProcessInvitesResponse = InviteControllerProcessInvitesResponses[keyof InviteControllerProcessInvitesResponses];

export type InviteControllerResendInviteData = {
    body?: never;
    path: {
        /**
         * Unique identifier for the invite
         */
        inviteId: string;
    };
    query?: never;
    url: '/api/notifications/invite/resend/{inviteId}';
};

export type InviteControllerResendInviteResponses = {
    /**
     * Invite resent successfully
     */
    200: MessageResponse;
};

export type InviteControllerResendInviteResponse = InviteControllerResendInviteResponses[keyof InviteControllerResendInviteResponses];

export type InviteControllerCancelInviteData = {
    body?: never;
    path: {
        /**
         * Unique identifier for the invite
         */
        inviteId: string;
    };
    query?: never;
    url: '/api/notifications/invite/cancel/{inviteId}';
};

export type InviteControllerCancelInviteResponses = {
    /**
     * Invite cancelled successfully
     */
    200: MessageResponse;
};

export type InviteControllerCancelInviteResponse = InviteControllerCancelInviteResponses[keyof InviteControllerCancelInviteResponses];

export type EnrollmentControllerGetEnrollmentData = {
    body?: never;
    path: {
        /**
         * User ID of the student to enroll
         */
        userId: string;
        /**
         * ID of the course to enroll in
         */
        courseId: string;
        /**
         * ID of the specific course version to enroll in
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/{userId}/enrollments/courses/{courseId}/versions/{versionId}';
};

export type EnrollmentControllerGetEnrollmentErrors = {
    /**
     * Enrollment not found for the user in the specified course version
     */
    404: EnrollmentNotFoundErrorResponse;
};

export type EnrollmentControllerGetEnrollmentError = EnrollmentControllerGetEnrollmentErrors[keyof EnrollmentControllerGetEnrollmentErrors];

export type EnrollmentControllerGetEnrollmentResponses = {
    /**
     * Enrollment details for the user in the course version
     */
    200: EnrolledUserResponse;
};

export type EnrollmentControllerGetEnrollmentResponse = EnrollmentControllerGetEnrollmentResponses[keyof EnrollmentControllerGetEnrollmentResponses];

export type EnrollmentControllerEnrollUserData = {
    /**
     * EnrollmentBody
     */
    body?: EnrollmentBody;
    path: {
        /**
         * User ID of the student to enroll
         */
        userId: string;
        /**
         * ID of the course to enroll in
         */
        courseId: string;
        /**
         * ID of the specific course version to enroll in
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/{userId}/enrollments/courses/{courseId}/versions/{versionId}';
};

export type EnrollmentControllerEnrollUserErrors = {
    /**
     * Invalid role or User already enrolled
     */
    400: BadRequestErrorResponse;
    /**
     * User or course version not found
     */
    404: EnrollmentNotFoundErrorResponse;
};

export type EnrollmentControllerEnrollUserError = EnrollmentControllerEnrollUserErrors[keyof EnrollmentControllerEnrollUserErrors];

export type EnrollmentControllerEnrollUserResponses = {
    /**
     * User enrolled successfully
     */
    200: EnrollUserResponse;
};

export type EnrollmentControllerEnrollUserResponse = EnrollmentControllerEnrollUserResponses[keyof EnrollmentControllerEnrollUserResponses];

export type EnrollmentControllerUnenrollUserData = {
    body?: never;
    path: {
        /**
         * User ID of the student to enroll
         */
        userId: string;
        /**
         * ID of the course to enroll in
         */
        courseId: string;
        /**
         * ID of the specific course version to enroll in
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/{userId}/enrollments/courses/{courseId}/versions/{versionId}/unenroll';
};

export type EnrollmentControllerUnenrollUserErrors = {
    /**
     * Enrollment not found for the user in the specified course version
     */
    404: EnrollmentNotFoundErrorResponse;
};

export type EnrollmentControllerUnenrollUserError = EnrollmentControllerUnenrollUserErrors[keyof EnrollmentControllerUnenrollUserErrors];

export type EnrollmentControllerUnenrollUserResponses = {
    /**
     * User unenrolled successfully
     */
    200: EnrollUserResponse;
};

export type EnrollmentControllerUnenrollUserResponse = EnrollmentControllerUnenrollUserResponses[keyof EnrollmentControllerUnenrollUserResponses];

export type EnrollmentControllerGetUserEnrollmentsData = {
    body?: never;
    path?: never;
    query?: {
        page?: unknown;
        limit?: unknown;
    };
    url: '/api/users/enrollments';
};

export type EnrollmentControllerGetUserEnrollmentsErrors = {
    /**
     * Invalid page or limit parameters
     */
    400: BadRequestErrorResponse;
    /**
     * No enrollments found for the user
     */
    404: EnrollmentNotFoundErrorResponse;
};

export type EnrollmentControllerGetUserEnrollmentsError = EnrollmentControllerGetUserEnrollmentsErrors[keyof EnrollmentControllerGetUserEnrollmentsErrors];

export type EnrollmentControllerGetUserEnrollmentsResponses = {
    /**
     * Paginated list of user enrollments
     */
    200: EnrollmentResponse;
};

export type EnrollmentControllerGetUserEnrollmentsResponse = EnrollmentControllerGetUserEnrollmentsResponses[keyof EnrollmentControllerGetUserEnrollmentsResponses];

export type EnrollmentControllerGetCourseVersionEnrollmentsData = {
    body?: never;
    path: {
        courseId: string;
        versionId: string;
    };
    query?: {
        page?: unknown;
        limit?: unknown;
    };
    url: '/api/users/enrollments/courses/{courseId}/versions/{versionId}';
};

export type EnrollmentControllerGetCourseVersionEnrollmentsErrors = {
    /**
     * Invalid page or limit parameters
     */
    400: BadRequestErrorResponse;
    /**
     * No enrollments found for the course version
     */
    404: EnrollmentNotFoundErrorResponse;
};

export type EnrollmentControllerGetCourseVersionEnrollmentsError = EnrollmentControllerGetCourseVersionEnrollmentsErrors[keyof EnrollmentControllerGetCourseVersionEnrollmentsErrors];

export type EnrollmentControllerGetCourseVersionEnrollmentsResponses = {
    /**
     * Paginated list of enrollments for the course version
     */
    200: CourseVersionEnrollmentResponse;
};

export type EnrollmentControllerGetCourseVersionEnrollmentsResponse = EnrollmentControllerGetCourseVersionEnrollmentsResponses[keyof EnrollmentControllerGetCourseVersionEnrollmentsResponses];

export type ProgressControllerGetUserProgressData = {
    body?: never;
    path: {
        /**
         * Course ID to retrieve progress for
         */
        courseId: string;
        /**
         * Course version ID to retrieve progress for
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/progress/courses/{courseId}/versions/{versionId}/';
};

export type ProgressControllerGetUserProgressErrors = {
    /**
     * Progress not found
     */
    404: ProgressNotFoundErrorResponse;
};

export type ProgressControllerGetUserProgressError = ProgressControllerGetUserProgressErrors[keyof ProgressControllerGetUserProgressErrors];

export type ProgressControllerGetUserProgressResponses = {
    /**
     * User progress retrieved successfully
     */
    200: ProgressDataResponse;
};

export type ProgressControllerGetUserProgressResponse = ProgressControllerGetUserProgressResponses[keyof ProgressControllerGetUserProgressResponses];

export type ProgressControllerGetUserProgressPercentageData = {
    body?: never;
    path: {
        /**
         * Course ID to retrieve progress for
         */
        courseId: string;
        /**
         * Course version ID to retrieve progress for
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/progress/courses/{courseId}/versions/{versionId}/percentage';
};

export type ProgressControllerGetUserProgressPercentageErrors = {
    /**
     * Progress not found
     */
    404: ProgressNotFoundErrorResponse;
};

export type ProgressControllerGetUserProgressPercentageError = ProgressControllerGetUserProgressPercentageErrors[keyof ProgressControllerGetUserProgressPercentageErrors];

export type ProgressControllerGetUserProgressPercentageResponses = {
    /**
     * User progress retrieved successfully
     */
    200: CompletedProgressResponse;
};

export type ProgressControllerGetUserProgressPercentageResponse = ProgressControllerGetUserProgressPercentageResponses[keyof ProgressControllerGetUserProgressPercentageResponses];

export type ProgressControllerStartItemData = {
    /**
     * StartItemBody
     */
    body?: StartItemBody;
    path: {
        /**
         * Course ID to track progress for
         */
        courseId: string;
        /**
         * Course version ID to track progress for
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/progress/courses/{courseId}/versions/{versionId}/start';
};

export type ProgressControllerStartItemErrors = {
    /**
     * courseVersionId, moduleId, sectionId, or itemId do not match user progress
     */
    400: BadRequestErrorResponse;
    /**
     * Progress not found
     */
    404: ProgressNotFoundErrorResponse;
};

export type ProgressControllerStartItemError = ProgressControllerStartItemErrors[keyof ProgressControllerStartItemErrors];

export type ProgressControllerStartItemResponses = {
    /**
     * Item started successfully
     */
    200: StartItemResponse;
};

export type ProgressControllerStartItemResponse = ProgressControllerStartItemResponses[keyof ProgressControllerStartItemResponses];

export type ProgressControllerStopItemData = {
    /**
     * StopItemBody
     */
    body?: StopItemBody;
    path: {
        /**
         * Course ID to stop tracking progress for
         */
        courseId: string;
        /**
         * Course version ID to stop tracking progress for
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/progress/courses/{courseId}/versions/{versionId}/stop';
};

export type ProgressControllerStopItemErrors = {
    /**
     * courseVersionId, moduleId, sectionId, or itemId do not match user progress
     */
    400: BadRequestErrorResponse;
    /**
     * Progress not found
     */
    404: ProgressNotFoundErrorResponse;
    /**
     * Failed to stop tracking item
     */
    500: InternalServerErrorResponse;
};

export type ProgressControllerStopItemError = ProgressControllerStopItemErrors[keyof ProgressControllerStopItemErrors];

export type ProgressControllerStopItemResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProgressControllerUpdateProgressData = {
    /**
     * UpdateProgressBody
     */
    body?: UpdateProgressBody;
    path: {
        courseVersionId: string;
        /**
         * User ID to update progress for
         */
        userId: string;
        /**
         * Course ID to update progress for
         */
        courseId: string;
    };
    query?: never;
    url: '/api/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update';
};

export type ProgressControllerUpdateProgressErrors = {
    /**
     * courseVersionId, moduleId, sectionId, or itemId do not match user progress
     */
    400: BadRequestErrorResponse;
    /**
     * Progress not found
     */
    404: ProgressNotFoundErrorResponse;
    /**
     * Progress could not be updated
     */
    500: InternalServerErrorResponse;
};

export type ProgressControllerUpdateProgressError = ProgressControllerUpdateProgressErrors[keyof ProgressControllerUpdateProgressErrors];

export type ProgressControllerUpdateProgressResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProgressControllerResetProgressData = {
    /**
     * ResetCourseProgressBody
     */
    body?: ResetCourseProgressBody;
    path: {
        /**
         * User ID to reset progress for
         */
        userId: string;
        /**
         * Course ID to reset progress for
         */
        courseId: string;
        /**
         * Course version ID to reset progress for
         */
        versionId: string;
    };
    query?: never;
    url: '/api/users/{userId}/progress/courses/{courseId}/versions/{versionId}/reset';
};

export type ProgressControllerResetProgressErrors = {
    /**
     * User not found
     */
    404: UserNotFoundErrorResponse;
    /**
     * Progress could not be reset
     */
    500: InternalServerErrorResponse;
};

export type ProgressControllerResetProgressError = ProgressControllerResetProgressErrors[keyof ProgressControllerResetProgressErrors];

export type ProgressControllerResetProgressResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ProgressControllerGetWatchTimeData = {
    body?: never;
    path: {
        /**
         * user ID to get watch time for
         */
        userId: string;
        /**
         * Item ID to get watch time for
         */
        itemId: string;
    };
    query?: never;
    url: '/api/users/{userId}/watchTime/item/{itemId}/';
};

export type ProgressControllerGetWatchTimeErrors = {
    /**
     * User not found
     */
    404: UserNotFoundErrorResponse;
    /**
     * Could not Fetch the Watch Time
     */
    500: InternalServerErrorResponse;
};

export type ProgressControllerGetWatchTimeError = ProgressControllerGetWatchTimeErrors[keyof ProgressControllerGetWatchTimeErrors];

export type ProgressControllerGetWatchTimeResponses = {
    /**
     * User Watch Time retrieved successfully
     */
    200: Array<WatchTimeResponse>;
};

export type ProgressControllerGetWatchTimeResponse = ProgressControllerGetWatchTimeResponses[keyof ProgressControllerGetWatchTimeResponses];

export type UserControllerGetUserByIdData = {
    body?: never;
    path: {
        /**
         * User ID of the person
         */
        userId: string;
    };
    query?: never;
    url: '/api/users/{userId}';
};

export type UserControllerGetUserByIdErrors = {
    /**
     * User not found
     */
    404: UserNotFoundErrorResponse;
};

export type UserControllerGetUserByIdError = UserControllerGetUserByIdErrors[keyof UserControllerGetUserByIdErrors];

export type UserControllerGetUserByIdResponses = {
    /**
     * User information retrieved successfully
     */
    200: UserResponse;
};

export type UserControllerGetUserByIdResponse = UserControllerGetUserByIdResponses[keyof UserControllerGetUserByIdResponses];

export type UserControllerEditUserData = {
    /**
     * EditUserBody
     */
    body?: EditUserBody;
    path?: never;
    query?: never;
    url: '/api/users/edit';
};

export type UserControllerEditUserErrors = {
    /**
     * User not found
     */
    404: UserNotFoundErrorResponse;
};

export type UserControllerEditUserError = UserControllerEditUserErrors[keyof UserControllerEditUserErrors];

export type UserControllerEditUserResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserControllerMakeAdminData = {
    body?: unknown;
    path: {
        /**
         * User ID of the person
         */
        userId: string;
    };
    query?: never;
    url: '/api/users/make-admin/{userId}';
};

export type UserControllerMakeAdminErrors = {
    /**
     * User not found
     */
    404: UserNotFoundErrorResponse;
};

export type UserControllerMakeAdminError = UserControllerMakeAdminErrors[keyof UserControllerMakeAdminErrors];

export type UserControllerMakeAdminResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AuthControllerSignupData = {
    /**
     * SignUpBody
     */
    body?: SignUpBody;
    path?: never;
    query?: never;
    url: '/api/auth/signup';
};

export type AuthControllerSignupResponses = {
    /**
     * Successful response
     */
    201: unknown;
};

export type AuthControllerGoogleSignupData = {
    /**
     * GoogleSignUpBody
     */
    body?: GoogleSignUpBody;
    path?: never;
    query?: never;
    url: '/api/auth/signup/google';
};

export type AuthControllerGoogleSignupResponses = {
    /**
     * Successful response
     */
    201: unknown;
};

export type AuthControllerChangePasswordData = {
    /**
     * ChangePasswordBody
     */
    body?: ChangePasswordBody;
    path?: never;
    query?: never;
    url: '/api/auth/change-password';
};

export type AuthControllerChangePasswordResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AuthControllerLoginData = {
    /**
     * LoginBody
     */
    body?: LoginBody;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type AuthControllerLoginResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CourseControllerCreateData = {
    /**
     * CourseBody
     */
    body?: CourseBody;
    path?: never;
    query?: never;
    url: '/api/courses/';
};

export type CourseControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
};

export type CourseControllerCreateError = CourseControllerCreateErrors[keyof CourseControllerCreateErrors];

export type CourseControllerCreateResponses = {
    /**
     * Course created successfully
     */
    201: CourseDataResponse;
};

export type CourseControllerCreateResponse = CourseControllerCreateResponses[keyof CourseControllerCreateResponses];

export type CourseControllerDeleteData = {
    body?: never;
    path: {
        /**
         * Object ID of the course
         */
        courseId: string;
    };
    query?: never;
    url: '/api/courses/{courseId}';
};

export type CourseControllerDeleteErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Course not found
     */
    404: CourseNotFoundErrorResponse;
};

export type CourseControllerDeleteError = CourseControllerDeleteErrors[keyof CourseControllerDeleteErrors];

export type CourseControllerDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CourseControllerReadData = {
    body?: never;
    path: {
        /**
         * Object ID of the course
         */
        courseId: string;
    };
    query?: never;
    url: '/api/courses/{courseId}';
};

export type CourseControllerReadErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Course not found
     */
    404: CourseNotFoundErrorResponse;
};

export type CourseControllerReadError = CourseControllerReadErrors[keyof CourseControllerReadErrors];

export type CourseControllerReadResponses = {
    /**
     * Course retrieved successfully
     */
    200: CourseDataResponse;
};

export type CourseControllerReadResponse = CourseControllerReadResponses[keyof CourseControllerReadResponses];

export type CourseControllerUpdateData = {
    /**
     * CourseBody
     */
    body?: CourseBody;
    path: {
        /**
         * Object ID of the course
         */
        courseId: string;
    };
    query?: never;
    url: '/api/courses/{courseId}';
};

export type CourseControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Course not found
     */
    404: CourseNotFoundErrorResponse;
};

export type CourseControllerUpdateError = CourseControllerUpdateErrors[keyof CourseControllerUpdateErrors];

export type CourseControllerUpdateResponses = {
    /**
     * Course updated successfully
     */
    200: CourseDataResponse;
};

export type CourseControllerUpdateResponse = CourseControllerUpdateResponses[keyof CourseControllerUpdateResponses];

export type CourseVersionControllerCreateData = {
    /**
     * CreateCourseVersionBody
     */
    body?: CreateCourseVersionBody;
    path: {
        /**
         * ID of the course to attach the new version to
         */
        courseId: string;
    };
    query?: never;
    url: '/api/courses/{courseId}/versions';
};

export type CourseVersionControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Course not found
     */
    404: CourseVersionNotFoundErrorResponse;
};

export type CourseVersionControllerCreateError = CourseVersionControllerCreateErrors[keyof CourseVersionControllerCreateErrors];

export type CourseVersionControllerCreateResponses = {
    /**
     * Course version created successfully
     */
    201: CourseVersion;
};

export type CourseVersionControllerCreateResponse = CourseVersionControllerCreateResponses[keyof CourseVersionControllerCreateResponses];

export type CourseVersionControllerReadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/courses/versions/{id}';
};

export type CourseVersionControllerReadErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Course version not found
     */
    404: CourseVersionNotFoundErrorResponse;
};

export type CourseVersionControllerReadError = CourseVersionControllerReadErrors[keyof CourseVersionControllerReadErrors];

export type CourseVersionControllerReadResponses = {
    /**
     * Course version retrieved successfully
     */
    200: CourseVersion;
};

export type CourseVersionControllerReadResponse = CourseVersionControllerReadResponses[keyof CourseVersionControllerReadResponses];

export type CourseVersionControllerDeleteData = {
    body?: never;
    path: {
        /**
         * ID of the course version to delete
         */
        versionId: string;
        /**
         * ID of the course to which the version belongs
         */
        courseId: string;
    };
    query?: never;
    url: '/api/courses/{courseId}/versions/{versionId}';
};

export type CourseVersionControllerDeleteErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Course or version not found
     */
    404: CourseVersionNotFoundErrorResponse;
};

export type CourseVersionControllerDeleteError = CourseVersionControllerDeleteErrors[keyof CourseVersionControllerDeleteErrors];

export type CourseVersionControllerDeleteResponses = {
    /**
     * Course version deleted successfully
     */
    200: DeleteCourseVersionResponse;
};

export type CourseVersionControllerDeleteResponse = CourseVersionControllerDeleteResponses[keyof CourseVersionControllerDeleteResponses];

export type ItemControllerReadAllData = {
    body?: never;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module containing the section
         */
        moduleId: string;
        /**
         * ID of the section
         */
        sectionId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items';
};

export type ItemControllerReadAllErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Item not found
     */
    404: ItemNotFoundErrorResponse;
};

export type ItemControllerReadAllError = ItemControllerReadAllErrors[keyof ItemControllerReadAllErrors];

export type ItemControllerReadAllResponses = {
    /**
     * Items retrieved successfully
     */
    200: ItemDataResponse;
};

export type ItemControllerReadAllResponse = ItemControllerReadAllResponses[keyof ItemControllerReadAllResponses];

export type ItemControllerCreateData = {
    /**
     * CreateItemBody
     */
    body?: CreateItemBody;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module containing the section
         */
        moduleId: string;
        /**
         * ID of the section
         */
        sectionId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items';
};

export type ItemControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Item not found
     */
    404: ItemNotFoundErrorResponse;
};

export type ItemControllerCreateError = ItemControllerCreateErrors[keyof ItemControllerCreateErrors];

export type ItemControllerCreateResponses = {
    /**
     * Item created successfully
     */
    201: ItemDataResponse;
};

export type ItemControllerCreateResponse = ItemControllerCreateResponses[keyof ItemControllerCreateResponses];

export type ItemControllerUpdateData = {
    /**
     * UpdateItemBody
     */
    body?: UpdateItemBody;
    path: {
        /**
         * ID of the course version
         */
        versionId: string;
        /**
         * ID of the module
         */
        moduleId: string;
        /**
         * ID of the section
         */
        sectionId: string;
        /**
         * ID of the item
         */
        itemId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}';
};

export type ItemControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Item not found
     */
    404: ItemNotFoundErrorResponse;
};

export type ItemControllerUpdateError = ItemControllerUpdateErrors[keyof ItemControllerUpdateErrors];

export type ItemControllerUpdateResponses = {
    /**
     * Item updated successfully
     */
    200: ItemDataResponse;
};

export type ItemControllerUpdateResponse = ItemControllerUpdateResponses[keyof ItemControllerUpdateResponses];

export type ItemControllerDeleteData = {
    body?: never;
    path: {
        /**
         * ID of the items group containing the item
         */
        itemsGroupId: string;
        /**
         * ID of the item to delete
         */
        itemId: string;
    };
    query?: never;
    url: '/api/courses/itemGroups/{itemsGroupId}/items/{itemId}';
};

export type ItemControllerDeleteErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Item not found
     */
    404: ItemNotFoundErrorResponse;
};

export type ItemControllerDeleteError = ItemControllerDeleteErrors[keyof ItemControllerDeleteErrors];

export type ItemControllerDeleteResponses = {
    /**
     * Item deleted successfully
     */
    200: DeletedItemResponse;
};

export type ItemControllerDeleteResponse = ItemControllerDeleteResponses[keyof ItemControllerDeleteResponses];

export type ItemControllerMoveData = {
    /**
     * MoveItemBody
     */
    body?: MoveItemBody;
    path: {
        /**
         * ID of the course version
         */
        versionId: string;
        /**
         * ID of the module
         */
        moduleId: string;
        /**
         * ID of the section
         */
        sectionId: string;
        /**
         * ID of the item
         */
        itemId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move';
};

export type ItemControllerMoveErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Item not found
     */
    404: ItemNotFoundErrorResponse;
};

export type ItemControllerMoveError = ItemControllerMoveErrors[keyof ItemControllerMoveErrors];

export type ItemControllerMoveResponses = {
    /**
     * Item moved successfully
     */
    200: ItemDataResponse;
};

export type ItemControllerMoveResponse = ItemControllerMoveResponses[keyof ItemControllerMoveResponses];

export type ItemControllerGetItemData = {
    body?: never;
    path: {
        /**
         * ID of the course in which user is enrolled
         */
        courseId: string;
        /**
         * ID of the course version containing the item
         */
        versionId: string;
        /**
         * ID of the item
         */
        itemId: string;
    };
    query?: never;
    url: '/api/courses/{courseId}/versions/{versionId}/item/{itemId}';
};

export type ItemControllerGetItemErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Item not found
     */
    404: ItemNotFoundErrorResponse;
};

export type ItemControllerGetItemError = ItemControllerGetItemErrors[keyof ItemControllerGetItemErrors];

export type ItemControllerGetItemResponses = {
    /**
     * Item retrieved successfully
     */
    201: GetItemResponse;
};

export type ItemControllerGetItemResponse = ItemControllerGetItemResponses[keyof ItemControllerGetItemResponses];

export type ModuleControllerCreateData = {
    /**
     * CreateModuleBody
     */
    body?: CreateModuleBody;
    path: {
        /**
         * ID of the course version to which the module will be added
         */
        versionId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules';
};

export type ModuleControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Module not found
     */
    404: ModuleNotFoundErrorResponse;
};

export type ModuleControllerCreateError = ModuleControllerCreateErrors[keyof ModuleControllerCreateErrors];

export type ModuleControllerCreateResponses = {
    /**
     * Module created successfully
     */
    201: ModuleDataResponse;
};

export type ModuleControllerCreateResponse = ModuleControllerCreateResponses[keyof ModuleControllerCreateResponses];

export type ModuleControllerDeleteData = {
    body?: never;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module to be updated
         */
        moduleId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}';
};

export type ModuleControllerDeleteErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Module not found
     */
    404: ModuleNotFoundErrorResponse;
};

export type ModuleControllerDeleteError = ModuleControllerDeleteErrors[keyof ModuleControllerDeleteErrors];

export type ModuleControllerDeleteResponses = {
    /**
     * Module deleted successfully
     */
    200: ModuleDeletedResponse;
};

export type ModuleControllerDeleteResponse = ModuleControllerDeleteResponses[keyof ModuleControllerDeleteResponses];

export type ModuleControllerUpdateData = {
    /**
     * UpdateModuleBody
     */
    body?: UpdateModuleBody;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module to be updated
         */
        moduleId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}';
};

export type ModuleControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Module not found
     */
    404: ModuleNotFoundErrorResponse;
};

export type ModuleControllerUpdateError = ModuleControllerUpdateErrors[keyof ModuleControllerUpdateErrors];

export type ModuleControllerUpdateResponses = {
    /**
     * Module updated successfully
     */
    200: ModuleDataResponse;
};

export type ModuleControllerUpdateResponse = ModuleControllerUpdateResponses[keyof ModuleControllerUpdateResponses];

export type ModuleControllerMoveData = {
    /**
     * MoveModuleBody
     */
    body?: MoveModuleBody;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module to be updated
         */
        moduleId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/move';
};

export type ModuleControllerMoveErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Module not found
     */
    404: ModuleNotFoundErrorResponse;
};

export type ModuleControllerMoveError = ModuleControllerMoveErrors[keyof ModuleControllerMoveErrors];

export type ModuleControllerMoveResponses = {
    /**
     * Module moved successfully
     */
    200: ModuleDataResponse;
};

export type ModuleControllerMoveResponse = ModuleControllerMoveResponses[keyof ModuleControllerMoveResponses];

export type SectionControllerCreateData = {
    /**
     * CreateSectionBody
     */
    body?: CreateSectionBody;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module to be updated
         */
        moduleId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections';
};

export type SectionControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Section not found
     */
    404: SectionNotFoundErrorResponse;
};

export type SectionControllerCreateError = SectionControllerCreateErrors[keyof SectionControllerCreateErrors];

export type SectionControllerCreateResponses = {
    /**
     * Section created successfully
     */
    201: CourseVersion;
};

export type SectionControllerCreateResponse = SectionControllerCreateResponses[keyof SectionControllerCreateResponses];

export type SectionControllerDeleteData = {
    body?: never;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module containing the section
         */
        moduleId: string;
        /**
         * ID of the section
         */
        sectionId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}';
};

export type SectionControllerDeleteErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Section not found
     */
    404: SectionNotFoundErrorResponse;
};

export type SectionControllerDeleteError = SectionControllerDeleteErrors[keyof SectionControllerDeleteErrors];

export type SectionControllerDeleteResponses = {
    /**
     * Section deleted successfully
     */
    200: SectionDeletedResponse;
};

export type SectionControllerDeleteResponse = SectionControllerDeleteResponses[keyof SectionControllerDeleteResponses];

export type SectionControllerUpdateData = {
    /**
     * UpdateSectionBody
     */
    body?: UpdateSectionBody;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module containing the section
         */
        moduleId: string;
        /**
         * ID of the section
         */
        sectionId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}';
};

export type SectionControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Section not found
     */
    404: SectionNotFoundErrorResponse;
};

export type SectionControllerUpdateError = SectionControllerUpdateErrors[keyof SectionControllerUpdateErrors];

export type SectionControllerUpdateResponses = {
    /**
     * Section updated successfully
     */
    200: CourseVersion;
};

export type SectionControllerUpdateResponse = SectionControllerUpdateResponses[keyof SectionControllerUpdateResponses];

export type SectionControllerMoveData = {
    /**
     * MoveSectionBody
     */
    body?: MoveSectionBody;
    path: {
        /**
         * ID of the course version containing the module
         */
        versionId: string;
        /**
         * ID of the module containing the section
         */
        moduleId: string;
        /**
         * ID of the section
         */
        sectionId: string;
    };
    query?: never;
    url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move';
};

export type SectionControllerMoveErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestErrorResponse;
    /**
     * Section not found
     */
    404: SectionNotFoundErrorResponse;
};

export type SectionControllerMoveError = SectionControllerMoveErrors[keyof SectionControllerMoveErrors];

export type SectionControllerMoveResponses = {
    /**
     * Section moved successfully
     */
    200: CourseVersion;
};

export type SectionControllerMoveResponse = SectionControllerMoveResponses[keyof SectionControllerMoveResponses];

export type QuestionControllerCreateData = {
    /**
     * QuestionBody
     */
    body?: QuestionBody;
    path?: never;
    query?: never;
    url: '/api/quizzes/questions/';
};

export type QuestionControllerCreateErrors = {
    /**
     * Question creation failed due to invalid body
     */
    400: BadRequestErrorResponse;
};

export type QuestionControllerCreateError = QuestionControllerCreateErrors[keyof QuestionControllerCreateErrors];

export type QuestionControllerCreateResponses = {
    /**
     * Question created successfully
     */
    201: QuestionId;
};

export type QuestionControllerCreateResponse = QuestionControllerCreateResponses[keyof QuestionControllerCreateResponses];

export type QuestionControllerDeleteData = {
    body?: never;
    path: {
        /**
         * Question ID
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/questions/{questionId}';
};

export type QuestionControllerDeleteErrors = {
    /**
     * Invalid question id
     */
    400: BadRequestErrorResponse;
    /**
     * Question not found
     */
    404: QuestionNotFoundErrorResponse;
};

export type QuestionControllerDeleteError = QuestionControllerDeleteErrors[keyof QuestionControllerDeleteErrors];

export type QuestionControllerDeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuestionControllerGetByIdData = {
    body?: never;
    path: {
        /**
         * Question ID
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/questions/{questionId}';
};

export type QuestionControllerGetByIdErrors = {
    /**
     * Invalid question id
     */
    400: BadRequestErrorResponse;
    /**
     * Question not found
     */
    404: QuestionNotFoundErrorResponse;
};

export type QuestionControllerGetByIdError = QuestionControllerGetByIdErrors[keyof QuestionControllerGetByIdErrors];

export type QuestionControllerGetByIdResponses = {
    /**
     * Question retrieved successfully
     */
    200: QuestionResponse;
};

export type QuestionControllerGetByIdResponse = QuestionControllerGetByIdResponses[keyof QuestionControllerGetByIdResponses];

export type QuestionControllerUpdateData = {
    /**
     * QuestionBody
     */
    body?: QuestionBody;
    path: {
        /**
         * Question ID
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/questions/{questionId}';
};

export type QuestionControllerUpdateResponses = {
    /**
     * Question updated successfully
     */
    200: QuestionResponse;
};

export type QuestionControllerUpdateResponse = QuestionControllerUpdateResponses[keyof QuestionControllerUpdateResponses];

export type QuestionControllerFlagQuestionData = {
    /**
     * FlagQuestionBody
     */
    body?: FlagQuestionBody;
    path: {
        /**
         * Question ID
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/questions/{questionId}/flag';
};

export type QuestionControllerFlagQuestionErrors = {
    /**
     * Invalid question id or reason
     */
    400: BadRequestErrorResponse;
    /**
     * You do not have permission to flag this question
     */
    403: ForbiddenErrorResponse;
    /**
     * Question not found
     */
    404: QuestionNotFoundErrorResponse;
};

export type QuestionControllerFlagQuestionError = QuestionControllerFlagQuestionErrors[keyof QuestionControllerFlagQuestionErrors];

export type QuestionControllerFlagQuestionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuestionControllerResolveFlagData = {
    /**
     * ResolveFlagBody
     */
    body?: ResolveFlagBody;
    path: {
        /**
         * ID of the flag to resolve
         */
        flagId: string;
    };
    query?: never;
    url: '/api/quizzes/questions/flags/{flagId}/resolve';
};

export type QuestionControllerResolveFlagErrors = {
    /**
     * Invalid flag id or status
     */
    400: BadRequestErrorResponse;
    /**
     * You do not have permission to resolve this flag
     */
    403: ForbiddenErrorResponse;
};

export type QuestionControllerResolveFlagError = QuestionControllerResolveFlagErrors[keyof QuestionControllerResolveFlagErrors];

export type QuestionControllerResolveFlagResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuizControllerGetAllQuestionBanksData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/bank';
};

export type QuizControllerGetAllQuestionBanksErrors = {
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerGetAllQuestionBanksError = QuizControllerGetAllQuestionBanksErrors[keyof QuizControllerGetAllQuestionBanksErrors];

export type QuizControllerGetAllQuestionBanksResponses = {
    /**
     * List of question banks
     */
    200: GetAllQuestionBanksResponse;
};

export type QuizControllerGetAllQuestionBanksResponse = QuizControllerGetAllQuestionBanksResponses[keyof QuizControllerGetAllQuestionBanksResponses];

export type QuizControllerEditQuestionBankData = {
    /**
     * EditQuestionBankBody
     */
    body?: EditQuestionBankBody;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/bank';
};

export type QuizControllerEditQuestionBankErrors = {
    /**
     * Invalid request body or parameters
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerEditQuestionBankError = QuizControllerEditQuestionBankErrors[keyof QuizControllerEditQuestionBankErrors];

export type QuizControllerEditQuestionBankResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuizControllerAddQuestionBankData = {
    /**
     * AddQuestionBankBody
     */
    body?: AddQuestionBankBody;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/bank';
};

export type QuizControllerAddQuestionBankErrors = {
    /**
     * Invalid request body or parameters
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerAddQuestionBankError = QuizControllerAddQuestionBankErrors[keyof QuizControllerAddQuestionBankErrors];

export type QuizControllerAddQuestionBankResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuizControllerRemoveQuestionBankData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the question bank
         */
        questionBankId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/bank/{questionBankId}';
};

export type QuizControllerRemoveQuestionBankErrors = {
    /**
     * Quiz or question bank not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerRemoveQuestionBankError = QuizControllerRemoveQuestionBankErrors[keyof QuizControllerRemoveQuestionBankErrors];

export type QuizControllerRemoveQuestionBankResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuizControllerGetUserMetricesData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the user
         */
        userId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/user/{userId}';
};

export type QuizControllerGetUserMetricesErrors = {
    /**
     * Invalid request parameters
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerGetUserMetricesError = QuizControllerGetUserMetricesErrors[keyof QuizControllerGetUserMetricesErrors];

export type QuizControllerGetUserMetricesResponses = {
    /**
     * User quiz metrics
     */
    200: UserQuizMetricsResponse;
};

export type QuizControllerGetUserMetricesResponse = QuizControllerGetUserMetricesResponses[keyof QuizControllerGetUserMetricesResponses];

export type QuizControllerGetQuizAttemptData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the attempt
         */
        attemptId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/attempts/{attemptId}';
};

export type QuizControllerGetQuizAttemptErrors = {
    /**
     * Quiz or attempt not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerGetQuizAttemptError = QuizControllerGetQuizAttemptErrors[keyof QuizControllerGetQuizAttemptErrors];

export type QuizControllerGetQuizAttemptResponses = {
    /**
     * Quiz attempt details
     */
    200: QuizAttemptResponse;
};

export type QuizControllerGetQuizAttemptResponse = QuizControllerGetQuizAttemptResponses[keyof QuizControllerGetQuizAttemptResponses];

export type QuizControllerGetQuizSubmissionData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the submission
         */
        submissionId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/submissions/{submissionId}';
};

export type QuizControllerGetQuizSubmissionResponses = {
    /**
     * Quiz submission details
     */
    200: QuizSubmissionResponse;
};

export type QuizControllerGetQuizSubmissionResponse = QuizControllerGetQuizSubmissionResponses[keyof QuizControllerGetQuizSubmissionResponses];

export type QuizControllerGetAllSubmissionsData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/submissions';
};

export type QuizControllerGetAllSubmissionsErrors = {
    /**
     * Invalid request parameters
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerGetAllSubmissionsError = QuizControllerGetAllSubmissionsErrors[keyof QuizControllerGetAllSubmissionsErrors];

export type QuizControllerGetAllSubmissionsResponses = {
    /**
     * List of submissions
     */
    200: Array<GetAllSubmissionsResponse>;
};

export type QuizControllerGetAllSubmissionsResponse = QuizControllerGetAllSubmissionsResponses[keyof QuizControllerGetAllSubmissionsResponses];

export type QuizControllerGetQuizDetailsData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/details';
};

export type QuizControllerGetQuizDetailsResponses = {
    /**
     * Quiz details
     */
    200: QuizDetailsResponse;
};

export type QuizControllerGetQuizDetailsResponse = QuizControllerGetQuizDetailsResponses[keyof QuizControllerGetQuizDetailsResponses];

export type QuizControllerGetQuizAnalyticsData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/analytics';
};

export type QuizControllerGetQuizAnalyticsResponses = {
    /**
     * Quiz analytics
     */
    200: QuizAnalyticsResponse;
};

export type QuizControllerGetQuizAnalyticsResponse = QuizControllerGetQuizAnalyticsResponses[keyof QuizControllerGetQuizAnalyticsResponses];

export type QuizControllerGetQuizPerformanceData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/performance';
};

export type QuizControllerGetQuizPerformanceErrors = {
    /**
     * Invalid request parameters
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerGetQuizPerformanceError = QuizControllerGetQuizPerformanceErrors[keyof QuizControllerGetQuizPerformanceErrors];

export type QuizControllerGetQuizPerformanceResponses = {
    /**
     * Performance stats per question
     */
    200: Array<QuizPerformanceResponse>;
};

export type QuizControllerGetQuizPerformanceResponse = QuizControllerGetQuizPerformanceResponses[keyof QuizControllerGetQuizPerformanceResponses];

export type QuizControllerGetQuizResultsData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/results';
};

export type QuizControllerGetQuizResultsErrors = {
    /**
     * Invalid request parameters
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerGetQuizResultsError = QuizControllerGetQuizResultsErrors[keyof QuizControllerGetQuizResultsErrors];

export type QuizControllerGetQuizResultsResponses = {
    /**
     * Quiz results
     */
    200: Array<QuizResultsResponse>;
};

export type QuizControllerGetQuizResultsResponse = QuizControllerGetQuizResultsResponses[keyof QuizControllerGetQuizResultsResponses];

export type QuizControllerUpdateQuizSubmissionScoreData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the submission
         */
        submissionId: string;
        /**
         * Score to update
         */
        score: number;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/submission/{submissionId}/score/{score}';
};

export type QuizControllerUpdateQuizSubmissionScoreErrors = {
    /**
     * Invalid submission ID or score
     */
    400: BadRequestErrorResponse;
    /**
     * Submission not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerUpdateQuizSubmissionScoreError = QuizControllerUpdateQuizSubmissionScoreErrors[keyof QuizControllerUpdateQuizSubmissionScoreErrors];

export type QuizControllerUpdateQuizSubmissionScoreResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuizControllerRegradeSubmissionData = {
    /**
     * RegradeSubmissionBody
     */
    body?: RegradeSubmissionBody;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the submission
         */
        submissionId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/submission/{submissionId}/regrade';
};

export type QuizControllerRegradeSubmissionErrors = {
    /**
     * Invalid submission ID or regrade data
     */
    400: BadRequestErrorResponse;
    /**
     * Submission not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerRegradeSubmissionError = QuizControllerRegradeSubmissionErrors[keyof QuizControllerRegradeSubmissionErrors];

export type QuizControllerRegradeSubmissionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuizControllerAddFeedbackToQuestionData = {
    /**
     * AddFeedbackBody
     */
    body?: AddFeedbackBody;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the submission
         */
        submissionId: string;
        /**
         * ID of the question
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/submission/{submissionId}/question/{questionId}/feedback';
};

export type QuizControllerAddFeedbackToQuestionErrors = {
    /**
     * Invalid submission ID or question ID
     */
    400: BadRequestErrorResponse;
    /**
     * Submission or question not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerAddFeedbackToQuestionError = QuizControllerAddFeedbackToQuestionErrors[keyof QuizControllerAddFeedbackToQuestionErrors];

export type QuizControllerAddFeedbackToQuestionResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuizControllerResetAvailableAttemptsData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the user
         */
        userId: string;
    };
    query?: never;
    url: '/api/quizzes/quiz/{quizId}/user/{userId}/reset-attempts';
};

export type QuizControllerResetAvailableAttemptsErrors = {
    /**
     * Invalid quiz ID or user ID
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: QuizNotFoundErrorResponse;
};

export type QuizControllerResetAvailableAttemptsError = QuizControllerResetAvailableAttemptsErrors[keyof QuizControllerResetAvailableAttemptsErrors];

export type QuizControllerResetAvailableAttemptsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type QuestionBankControllerCreateData = {
    /**
     * CreateQuestionBankBody
     */
    body?: CreateQuestionBankBody;
    path?: never;
    query?: never;
    url: '/api/quizzes/question-bank/';
};

export type QuestionBankControllerCreateErrors = {
    /**
     * Course or course version or some questions not found
     */
    404: QuestionBankNotFoundErrorResponse;
};

export type QuestionBankControllerCreateError = QuestionBankControllerCreateErrors[keyof QuestionBankControllerCreateErrors];

export type QuestionBankControllerCreateResponses = {
    /**
     * Question bank created successfully
     */
    200: CreateQuestionBankResponse;
};

export type QuestionBankControllerCreateResponse = QuestionBankControllerCreateResponses[keyof QuestionBankControllerCreateResponses];

export type QuestionBankControllerGetByIdData = {
    body?: never;
    path: {
        /**
         * ID of the question bank
         */
        questionBankId: string;
    };
    query?: never;
    url: '/api/quizzes/question-bank/{questionBankId}';
};

export type QuestionBankControllerGetByIdErrors = {
    /**
     * Question bank not found
     */
    404: QuestionBankNotFoundErrorResponse;
};

export type QuestionBankControllerGetByIdError = QuestionBankControllerGetByIdErrors[keyof QuestionBankControllerGetByIdErrors];

export type QuestionBankControllerGetByIdResponses = {
    /**
     * Question bank retrieved successfully
     */
    200: QuestionBankResponse;
};

export type QuestionBankControllerGetByIdResponse = QuestionBankControllerGetByIdResponses[keyof QuestionBankControllerGetByIdResponses];

export type QuestionBankControllerAddQuestionData = {
    body?: never;
    path: {
        /**
         * ID of the question bank
         */
        questionBankId: string;
        /**
         * ID of the question
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/question-bank/{questionBankId}/questions/{questionId}/add';
};

export type QuestionBankControllerAddQuestionErrors = {
    /**
     * Question bank or question not found
     */
    404: QuestionBankNotFoundErrorResponse;
};

export type QuestionBankControllerAddQuestionError = QuestionBankControllerAddQuestionErrors[keyof QuestionBankControllerAddQuestionErrors];

export type QuestionBankControllerAddQuestionResponses = {
    /**
     * Question added to question bank successfully
     */
    200: QuestionBankResponse;
};

export type QuestionBankControllerAddQuestionResponse = QuestionBankControllerAddQuestionResponses[keyof QuestionBankControllerAddQuestionResponses];

export type QuestionBankControllerRemoveQuestionData = {
    body?: never;
    path: {
        /**
         * ID of the question bank
         */
        questionBankId: string;
        /**
         * ID of the question
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/question-bank/{questionBankId}/questions/{questionId}/remove';
};

export type QuestionBankControllerRemoveQuestionErrors = {
    /**
     * Question bank or question not found
     */
    404: QuestionBankNotFoundErrorResponse;
};

export type QuestionBankControllerRemoveQuestionError = QuestionBankControllerRemoveQuestionErrors[keyof QuestionBankControllerRemoveQuestionErrors];

export type QuestionBankControllerRemoveQuestionResponses = {
    /**
     * Question removed from question bank successfully
     */
    200: QuestionBankResponse;
};

export type QuestionBankControllerRemoveQuestionResponse = QuestionBankControllerRemoveQuestionResponses[keyof QuestionBankControllerRemoveQuestionResponses];

export type QuestionBankControllerReplaceQuestionData = {
    body?: never;
    path: {
        /**
         * ID of the question bank
         */
        questionBankId: string;
        /**
         * ID of the question
         */
        questionId: string;
    };
    query?: never;
    url: '/api/quizzes/question-bank/{questionBankId}/questions/{questionId}/replace-duplicate';
};

export type QuestionBankControllerReplaceQuestionErrors = {
    /**
     * Question bank or question not found
     */
    404: QuestionBankNotFoundErrorResponse;
};

export type QuestionBankControllerReplaceQuestionError = QuestionBankControllerReplaceQuestionErrors[keyof QuestionBankControllerReplaceQuestionErrors];

export type QuestionBankControllerReplaceQuestionResponses = {
    /**
     * Question replaced with duplicate successfully
     */
    200: ReplaceQuestionResponse;
};

export type QuestionBankControllerReplaceQuestionResponse = QuestionBankControllerReplaceQuestionResponses[keyof QuestionBankControllerReplaceQuestionResponses];

export type AttemptControllerAttemptData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
    };
    query?: never;
    url: '/api/quizzes/{quizId}/attempt';
};

export type AttemptControllerAttemptErrors = {
    /**
     * Bad Request
     */
    400: BadRequestErrorResponse;
    /**
     * Quiz not found
     */
    404: AttemptNotFoundErrorResponse;
};

export type AttemptControllerAttemptError = AttemptControllerAttemptErrors[keyof AttemptControllerAttemptErrors];

export type AttemptControllerAttemptResponses = {
    /**
     * Attempt created successfully
     */
    200: CreateAttemptResponse;
};

export type AttemptControllerAttemptResponse = AttemptControllerAttemptResponses[keyof AttemptControllerAttemptResponses];

export type AttemptControllerSaveData = {
    /**
     * QuestionAnswersBody
     */
    body?: QuestionAnswersBody;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the attempt
         */
        attemptId: string;
    };
    query?: never;
    url: '/api/quizzes/{quizId}/attempt/{attemptId}/save';
};

export type AttemptControllerSaveErrors = {
    /**
     * Bad Request
     */
    400: BadRequestErrorResponse;
    /**
     * Attempt or Quiz not found
     */
    404: AttemptNotFoundErrorResponse;
};

export type AttemptControllerSaveError = AttemptControllerSaveErrors[keyof AttemptControllerSaveErrors];

export type AttemptControllerSaveResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type AttemptControllerSubmitData = {
    /**
     * QuestionAnswersBody
     */
    body?: QuestionAnswersBody;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the attempt
         */
        attemptId: string;
    };
    query?: never;
    url: '/api/quizzes/{quizId}/attempt/{attemptId}/submit';
};

export type AttemptControllerSubmitErrors = {
    /**
     * Bad Request
     */
    400: BadRequestErrorResponse;
    /**
     * Attempt or Quiz not found
     */
    404: AttemptNotFoundErrorResponse;
};

export type AttemptControllerSubmitError = AttemptControllerSubmitErrors[keyof AttemptControllerSubmitErrors];

export type AttemptControllerSubmitResponses = {
    /**
     * Attempt submitted successfully
     */
    200: SubmitAttemptResponse;
};

export type AttemptControllerSubmitResponse = AttemptControllerSubmitResponses[keyof AttemptControllerSubmitResponses];

export type AttemptControllerGetAttemptData = {
    body?: never;
    path: {
        /**
         * ID of the quiz
         */
        quizId: string;
        /**
         * ID of the attempt
         */
        attemptId: string;
    };
    query?: never;
    url: '/api/quizzes/{quizId}/attempt/{attemptId}';
};

export type AttemptControllerGetAttemptErrors = {
    /**
     * Attempy does not belong to user or quiz
     */
    400: BadRequestErrorResponse;
    /**
     * Attempt not found
     */
    404: AttemptNotFoundErrorResponse;
};

export type AttemptControllerGetAttemptError = AttemptControllerGetAttemptErrors[keyof AttemptControllerGetAttemptErrors];

export type AttemptControllerGetAttemptResponses = {
    /**
     * Attempt retrieved successfully
     */
    200: GetAttemptResponse;
};

export type AttemptControllerGetAttemptResponse = AttemptControllerGetAttemptResponses[keyof AttemptControllerGetAttemptResponses];

export type GenAiVideoControllerGenerateTranscriptData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/api/genai/generate/transcript';
};

export type GenAiVideoControllerGenerateTranscriptResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GenAiVideoControllerSegmentTranscriptData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/api/genai/generate/transcript/segment';
};

export type GenAiVideoControllerSegmentTranscriptResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GenAiVideoControllerGenerateQuestionsData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/api/genai/generate/questions';
};

export type GenAiVideoControllerGenerateQuestionsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GenAiVideoControllerGenerateCourseItemsFromVideoData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/api/genai/generate-course-items-from-video';
};

export type GenAiVideoControllerGenerateCourseItemsFromVideoResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CourseSettingsControllerCreateData = {
    /**
     * CreateCourseSettingsBody
     */
    body?: CreateCourseSettingsBody;
    path?: never;
    query?: never;
    url: '/api/settings/courses/';
};

export type CourseSettingsControllerCreateResponses = {
    /**
     * Successful response
     */
    201: unknown;
};

export type CourseSettingsControllerGetData = {
    body?: never;
    path: {
        /**
         * ID of the course
         */
        courseId: string;
        /**
         * ID of the course version
         */
        versionId: string;
    };
    query?: never;
    url: '/api/settings/courses/{courseId}/{versionId}';
};

export type CourseSettingsControllerGetResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CourseSettingsControllerUpdateCourseSettingsData = {
    /**
     * AddCourseProctoringBody
     */
    body?: AddCourseProctoringBody;
    path: {
        /**
         * ID of the course
         */
        courseId: string;
        /**
         * ID of the course version
         */
        versionId: string;
    };
    query?: never;
    url: '/api/settings/courses/{courseId}/{versionId}/proctoring';
};

export type CourseSettingsControllerUpdateCourseSettingsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserSettingsControllerCreateData = {
    /**
     * CreateUserSettingsBody
     */
    body?: CreateUserSettingsBody;
    path?: never;
    query?: never;
    url: '/api/settings/users/';
};

export type UserSettingsControllerCreateResponses = {
    /**
     * Successful response
     */
    201: unknown;
};

export type UserSettingsControllerGetData = {
    body?: never;
    path: {
        /**
         * ID of the student
         */
        studentId: string;
        /**
         * ID of the course
         */
        courseId: string;
        /**
         * ID of the course version
         */
        versionId: string;
    };
    query?: never;
    url: '/api/settings/users/{studentId}/{courseId}/{versionId}';
};

export type UserSettingsControllerGetResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type UserSettingsControllerUpdateUserSettingsData = {
    /**
     * AddUserProctoringBody
     */
    body?: AddUserProctoringBody;
    path: {
        /**
         * ID of the student
         */
        studentId: string;
        /**
         * ID of the course
         */
        courseId: string;
        /**
         * ID of the course version
         */
        versionId: string;
    };
    query?: never;
    url: '/api/settings/users/{studentId}/{courseId}/{versionId}/proctoring';
};

export type UserSettingsControllerUpdateUserSettingsResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: string;
};