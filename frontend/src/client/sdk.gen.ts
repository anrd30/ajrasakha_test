// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { InviteControllerGetInvitesForCourseVersionData, InviteControllerGetInvitesForCourseVersionResponses, InviteControllerInviteUsersData, InviteControllerInviteUsersResponses, InviteControllerInviteUsersErrors, InviteControllerProcessInvitesData, InviteControllerProcessInvitesResponses, InviteControllerResendInviteData, InviteControllerResendInviteResponses, InviteControllerCancelInviteData, InviteControllerCancelInviteResponses, EnrollmentControllerGetEnrollmentData, EnrollmentControllerGetEnrollmentResponses, EnrollmentControllerGetEnrollmentErrors, EnrollmentControllerEnrollUserData, EnrollmentControllerEnrollUserResponses, EnrollmentControllerEnrollUserErrors, EnrollmentControllerUnenrollUserData, EnrollmentControllerUnenrollUserResponses, EnrollmentControllerUnenrollUserErrors, EnrollmentControllerGetUserEnrollmentsData, EnrollmentControllerGetUserEnrollmentsResponses, EnrollmentControllerGetUserEnrollmentsErrors, EnrollmentControllerGetCourseVersionEnrollmentsData, EnrollmentControllerGetCourseVersionEnrollmentsResponses, EnrollmentControllerGetCourseVersionEnrollmentsErrors, ProgressControllerGetUserProgressData, ProgressControllerGetUserProgressResponses, ProgressControllerGetUserProgressErrors, ProgressControllerGetUserProgressPercentageData, ProgressControllerGetUserProgressPercentageResponses, ProgressControllerGetUserProgressPercentageErrors, ProgressControllerStartItemData, ProgressControllerStartItemResponses, ProgressControllerStartItemErrors, ProgressControllerStopItemData, ProgressControllerStopItemResponses, ProgressControllerStopItemErrors, ProgressControllerUpdateProgressData, ProgressControllerUpdateProgressResponses, ProgressControllerUpdateProgressErrors, ProgressControllerResetProgressData, ProgressControllerResetProgressResponses, ProgressControllerResetProgressErrors, ProgressControllerGetWatchTimeData, ProgressControllerGetWatchTimeResponses, ProgressControllerGetWatchTimeErrors, UserControllerGetUserByIdData, UserControllerGetUserByIdResponses, UserControllerGetUserByIdErrors, UserControllerEditUserData, UserControllerEditUserResponses, UserControllerEditUserErrors, UserControllerMakeAdminData, UserControllerMakeAdminResponses, UserControllerMakeAdminErrors, AuthControllerSignupData, AuthControllerSignupResponses, AuthControllerGoogleSignupData, AuthControllerGoogleSignupResponses, AuthControllerChangePasswordData, AuthControllerChangePasswordResponses, AuthControllerLoginData, AuthControllerLoginResponses, CourseControllerCreateData, CourseControllerCreateResponses, CourseControllerCreateErrors, CourseControllerDeleteData, CourseControllerDeleteResponses, CourseControllerDeleteErrors, CourseControllerReadData, CourseControllerReadResponses, CourseControllerReadErrors, CourseControllerUpdateData, CourseControllerUpdateResponses, CourseControllerUpdateErrors, CourseVersionControllerCreateData, CourseVersionControllerCreateResponses, CourseVersionControllerCreateErrors, CourseVersionControllerReadData, CourseVersionControllerReadResponses, CourseVersionControllerReadErrors, CourseVersionControllerDeleteData, CourseVersionControllerDeleteResponses, CourseVersionControllerDeleteErrors, ItemControllerReadAllData, ItemControllerReadAllResponses, ItemControllerReadAllErrors, ItemControllerCreateData, ItemControllerCreateResponses, ItemControllerCreateErrors, ItemControllerUpdateData, ItemControllerUpdateResponses, ItemControllerUpdateErrors, ItemControllerDeleteData, ItemControllerDeleteResponses, ItemControllerDeleteErrors, ItemControllerMoveData, ItemControllerMoveResponses, ItemControllerMoveErrors, ItemControllerGetItemData, ItemControllerGetItemResponses, ItemControllerGetItemErrors, ModuleControllerCreateData, ModuleControllerCreateResponses, ModuleControllerCreateErrors, ModuleControllerDeleteData, ModuleControllerDeleteResponses, ModuleControllerDeleteErrors, ModuleControllerUpdateData, ModuleControllerUpdateResponses, ModuleControllerUpdateErrors, ModuleControllerMoveData, ModuleControllerMoveResponses, ModuleControllerMoveErrors, SectionControllerCreateData, SectionControllerCreateResponses, SectionControllerCreateErrors, SectionControllerDeleteData, SectionControllerDeleteResponses, SectionControllerDeleteErrors, SectionControllerUpdateData, SectionControllerUpdateResponses, SectionControllerUpdateErrors, SectionControllerMoveData, SectionControllerMoveResponses, SectionControllerMoveErrors, QuestionControllerCreateData, QuestionControllerCreateResponses, QuestionControllerCreateErrors, QuestionControllerDeleteData, QuestionControllerDeleteResponses, QuestionControllerDeleteErrors, QuestionControllerGetByIdData, QuestionControllerGetByIdResponses, QuestionControllerGetByIdErrors, QuestionControllerUpdateData, QuestionControllerUpdateResponses, QuestionControllerFlagQuestionData, QuestionControllerFlagQuestionResponses, QuestionControllerFlagQuestionErrors, QuestionControllerResolveFlagData, QuestionControllerResolveFlagResponses, QuestionControllerResolveFlagErrors, QuizControllerGetAllQuestionBanksData, QuizControllerGetAllQuestionBanksResponses, QuizControllerGetAllQuestionBanksErrors, QuizControllerEditQuestionBankData, QuizControllerEditQuestionBankResponses, QuizControllerEditQuestionBankErrors, QuizControllerAddQuestionBankData, QuizControllerAddQuestionBankResponses, QuizControllerAddQuestionBankErrors, QuizControllerRemoveQuestionBankData, QuizControllerRemoveQuestionBankResponses, QuizControllerRemoveQuestionBankErrors, QuizControllerGetUserMetricesData, QuizControllerGetUserMetricesResponses, QuizControllerGetUserMetricesErrors, QuizControllerGetQuizAttemptData, QuizControllerGetQuizAttemptResponses, QuizControllerGetQuizAttemptErrors, QuizControllerGetQuizSubmissionData, QuizControllerGetQuizSubmissionResponses, QuizControllerGetAllSubmissionsData, QuizControllerGetAllSubmissionsResponses, QuizControllerGetAllSubmissionsErrors, QuizControllerGetQuizDetailsData, QuizControllerGetQuizDetailsResponses, QuizControllerGetQuizAnalyticsData, QuizControllerGetQuizAnalyticsResponses, QuizControllerGetQuizPerformanceData, QuizControllerGetQuizPerformanceResponses, QuizControllerGetQuizPerformanceErrors, QuizControllerGetQuizResultsData, QuizControllerGetQuizResultsResponses, QuizControllerGetQuizResultsErrors, QuizControllerUpdateQuizSubmissionScoreData, QuizControllerUpdateQuizSubmissionScoreResponses, QuizControllerUpdateQuizSubmissionScoreErrors, QuizControllerRegradeSubmissionData, QuizControllerRegradeSubmissionResponses, QuizControllerRegradeSubmissionErrors, QuizControllerAddFeedbackToQuestionData, QuizControllerAddFeedbackToQuestionResponses, QuizControllerAddFeedbackToQuestionErrors, QuizControllerResetAvailableAttemptsData, QuizControllerResetAvailableAttemptsResponses, QuizControllerResetAvailableAttemptsErrors, QuestionBankControllerCreateData, QuestionBankControllerCreateResponses, QuestionBankControllerCreateErrors, QuestionBankControllerGetByIdData, QuestionBankControllerGetByIdResponses, QuestionBankControllerGetByIdErrors, QuestionBankControllerAddQuestionData, QuestionBankControllerAddQuestionResponses, QuestionBankControllerAddQuestionErrors, QuestionBankControllerRemoveQuestionData, QuestionBankControllerRemoveQuestionResponses, QuestionBankControllerRemoveQuestionErrors, QuestionBankControllerReplaceQuestionData, QuestionBankControllerReplaceQuestionResponses, QuestionBankControllerReplaceQuestionErrors, AttemptControllerAttemptData, AttemptControllerAttemptResponses, AttemptControllerAttemptErrors, AttemptControllerSaveData, AttemptControllerSaveResponses, AttemptControllerSaveErrors, AttemptControllerSubmitData, AttemptControllerSubmitResponses, AttemptControllerSubmitErrors, AttemptControllerGetAttemptData, AttemptControllerGetAttemptResponses, AttemptControllerGetAttemptErrors, GenAiVideoControllerGenerateTranscriptData, GenAiVideoControllerGenerateTranscriptResponses, GenAiVideoControllerSegmentTranscriptData, GenAiVideoControllerSegmentTranscriptResponses, GenAiVideoControllerGenerateQuestionsData, GenAiVideoControllerGenerateQuestionsResponses, GenAiVideoControllerGenerateCourseItemsFromVideoData, GenAiVideoControllerGenerateCourseItemsFromVideoResponses, CourseSettingsControllerCreateData, CourseSettingsControllerCreateResponses, CourseSettingsControllerGetData, CourseSettingsControllerGetResponses, CourseSettingsControllerUpdateCourseSettingsData, CourseSettingsControllerUpdateCourseSettingsResponses, UserSettingsControllerCreateData, UserSettingsControllerCreateResponses, UserSettingsControllerGetData, UserSettingsControllerGetResponses, UserSettingsControllerUpdateUserSettingsData, UserSettingsControllerUpdateUserSettingsResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Invites for Course Version
 * Retrieve all invites for a specific course version.
 */
export const inviteControllerGetInvitesForCourseVersion = <ThrowOnError extends boolean = false>(options: Options<InviteControllerGetInvitesForCourseVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InviteControllerGetInvitesForCourseVersionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/invite/courses/{courseId}/versions/{versionId}',
        ...options
    });
};

/**
 * Invite users to a course
 * Invites users to a specific version of a course.
 */
export const inviteControllerInviteUsers = <ThrowOnError extends boolean = false>(options: Options<InviteControllerInviteUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteControllerInviteUsersResponses, InviteControllerInviteUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/invite/courses/{courseId}/versions/{versionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Process Invite
 * Process an invite given an inviteId and send a response before redirecting the user.
 */
export const inviteControllerProcessInvites = <ThrowOnError extends boolean = false>(options: Options<InviteControllerProcessInvitesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InviteControllerProcessInvitesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/invite/{inviteId}',
        ...options
    });
};

/**
 * Resend Invite
 * Resend an invite email to the user.
 */
export const inviteControllerResendInvite = <ThrowOnError extends boolean = false>(options: Options<InviteControllerResendInviteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteControllerResendInviteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/invite/resend/{inviteId}',
        ...options
    });
};

/**
 * Cancel Invite
 * Cancel an existing invite.
 */
export const inviteControllerCancelInvite = <ThrowOnError extends boolean = false>(options: Options<InviteControllerCancelInviteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteControllerCancelInviteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/invite/cancel/{inviteId}',
        ...options
    });
};

/**
 * Get enrollment details for a user in a course version
 * Retrieves enrollment details, including role and status, for a user in a specific course version.
 */
export const enrollmentControllerGetEnrollment = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerGetEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EnrollmentControllerGetEnrollmentResponses, EnrollmentControllerGetEnrollmentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{userId}/enrollments/courses/{courseId}/versions/{versionId}',
        ...options
    });
};

/**
 * Enroll a user in a course version
 * Enrolls a user in a specific course version with a given role.
 */
export const enrollmentControllerEnrollUser = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerEnrollUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnrollmentControllerEnrollUserResponses, EnrollmentControllerEnrollUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{userId}/enrollments/courses/{courseId}/versions/{versionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unenroll a user from a course version
 * Removes a user's enrollment and progress from a specific course version.
 */
export const enrollmentControllerUnenrollUser = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerUnenrollUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnrollmentControllerUnenrollUserResponses, EnrollmentControllerUnenrollUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{userId}/enrollments/courses/{courseId}/versions/{versionId}/unenroll',
        ...options
    });
};

/**
 * Get all enrollments for a user
 * Retrieves a paginated list of all course enrollments for a user.
 */
export const enrollmentControllerGetUserEnrollments = <ThrowOnError extends boolean = false>(options?: Options<EnrollmentControllerGetUserEnrollmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EnrollmentControllerGetUserEnrollmentsResponses, EnrollmentControllerGetUserEnrollmentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/enrollments',
        ...options
    });
};

/**
 * Get all enrollments for a course version
 * Retrieves a paginated list of all users enrolled in a specific course version.
 */
export const enrollmentControllerGetCourseVersionEnrollments = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerGetCourseVersionEnrollmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EnrollmentControllerGetCourseVersionEnrollmentsResponses, EnrollmentControllerGetCourseVersionEnrollmentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/enrollments/courses/{courseId}/versions/{versionId}',
        ...options
    });
};

/**
 * Get user progress in a course version
 * Retrieves the progress of a user in a specific course version.
 */
export const progressControllerGetUserProgress = <ThrowOnError extends boolean = false>(options: Options<ProgressControllerGetUserProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProgressControllerGetUserProgressResponses, ProgressControllerGetUserProgressErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/progress/courses/{courseId}/versions/{versionId}/',
        ...options
    });
};

/**
 * Get %age progress in a course version
 * Retrieves the progress of a user in a specific course version.
 */
export const progressControllerGetUserProgressPercentage = <ThrowOnError extends boolean = false>(options: Options<ProgressControllerGetUserProgressPercentageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProgressControllerGetUserProgressPercentageResponses, ProgressControllerGetUserProgressPercentageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/progress/courses/{courseId}/versions/{versionId}/percentage',
        ...options
    });
};

/**
 * Start an item for user progress
 * Marks the start of an item for a user in a course version.
 */
export const progressControllerStartItem = <ThrowOnError extends boolean = false>(options: Options<ProgressControllerStartItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProgressControllerStartItemResponses, ProgressControllerStartItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/progress/courses/{courseId}/versions/{versionId}/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Stop an item for user progress
 * Marks the stop of an item for a user in a course version.
 */
export const progressControllerStopItem = <ThrowOnError extends boolean = false>(options: Options<ProgressControllerStopItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProgressControllerStopItemResponses, ProgressControllerStopItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/progress/courses/{courseId}/versions/{versionId}/stop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user progress
 * Updates the progress of a user for a specific item in a course version.
 */
export const progressControllerUpdateProgress = <ThrowOnError extends boolean = false>(options: Options<ProgressControllerUpdateProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProgressControllerUpdateProgressResponses, ProgressControllerUpdateProgressErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset user progress
 * Resets the user's progress in a course version.
 * If only moduleId is provided, resets to the beginning of the module.
 * If moduleId and sectionId are provided, resets to the beginning of the section.
 * If moduleId, sectionId, and itemId are provided, resets to the beginning of the item.
 * If none are provided, resets to the beginning of the course.
 */
export const progressControllerResetProgress = <ThrowOnError extends boolean = false>(options: Options<ProgressControllerResetProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProgressControllerResetProgressResponses, ProgressControllerResetProgressErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{userId}/progress/courses/{courseId}/versions/{versionId}/reset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Watch Time
 * Gets the User Watch Time for the given Item Id
 */
export const progressControllerGetWatchTime = <ThrowOnError extends boolean = false>(options: Options<ProgressControllerGetWatchTimeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProgressControllerGetWatchTimeResponses, ProgressControllerGetWatchTimeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{userId}/watchTime/item/{itemId}/',
        ...options
    });
};

/**
 * Get user information by user ID
 * Retrieves user information based on the provided user ID.
 */
export const userControllerGetUserById = <ThrowOnError extends boolean = false>(options: Options<UserControllerGetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserControllerGetUserByIdResponses, UserControllerGetUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{userId}',
        ...options
    });
};

/**
 * Edit user information
 * Edit user information like first and last name.
 */
export const userControllerEditUser = <ThrowOnError extends boolean = false>(options?: Options<UserControllerEditUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UserControllerEditUserResponses, UserControllerEditUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/edit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Make a user an admin
 * Promotes a user to admin status based on the provided user ID.
 */
export const userControllerMakeAdmin = <ThrowOnError extends boolean = false>(options: Options<UserControllerMakeAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserControllerMakeAdminResponses, UserControllerMakeAdminErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/make-admin/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register a new user account
 * Registers a new user using Firebase Authentication and stores additional user details in the application database. This is typically the first step for any new user to access the system.
 */
export const authControllerSignup = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerSignupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerSignupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register a new user account
 * Registers a new user using Firebase Authentication and stores additional user details in the application database. This is typically the first step for any new user to access the system.
 */
export const authControllerGoogleSignup = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGoogleSignupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerGoogleSignupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/signup/google',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Change user password
 * Allows an authenticated user to update their password. This action is performed via Firebase Authentication and requires the current credentials to be valid.
 */
export const authControllerChangePassword = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<AuthControllerChangePasswordResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login
 */
export const authControllerLogin = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerLoginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new course
 * Creates a new course in the system.<br/>.
 */
export const courseControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<CourseControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CourseControllerCreateResponses, CourseControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a course
 * Deletes a course by ID.
 */
export const courseControllerDelete = <ThrowOnError extends boolean = false>(options: Options<CourseControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CourseControllerDeleteResponses, CourseControllerDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/{courseId}',
        ...options
    });
};

/**
 * Get course details
 * Retrieves course information by ID.<br/>
 * Accessible to:
 * - Users who are part of the course (students, teaching assistants, instructors, or managers)
 *
 */
export const courseControllerRead = <ThrowOnError extends boolean = false>(options: Options<CourseControllerReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseControllerReadResponses, CourseControllerReadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/{courseId}',
        ...options
    });
};

/**
 * Update a course
 * Updates course metadata such as title or description.<br/>
 * Accessible to:
 * - Instructor or manager for the course.
 */
export const courseControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CourseControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CourseControllerUpdateResponses, CourseControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/{courseId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a course version
 * Creates a new version of a given course.<br/>
 * Accessible to:
 * - Instructor or manager of the course.
 */
export const courseVersionControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CourseVersionControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CourseVersionControllerCreateResponses, CourseVersionControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/{courseId}/versions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get course version details
 * Retrieves information about a specific version of a course.<br/>
 * Accessible to:
 * - Users who are part of the course version (students, teaching assistants, instructors, or managers).
 */
export const courseVersionControllerRead = <ThrowOnError extends boolean = false>(options: Options<CourseVersionControllerReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseVersionControllerReadResponses, CourseVersionControllerReadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{id}',
        ...options
    });
};

/**
 * Delete a course version
 * Deletes a specific version of a course.<br/>
 * Accessible to:
 * - Manager of the course.
 */
export const courseVersionControllerDelete = <ThrowOnError extends boolean = false>(options: Options<CourseVersionControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CourseVersionControllerDeleteResponses, CourseVersionControllerDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/{courseId}/versions/{versionId}',
        ...options
    });
};

/**
 * Get all item references in a section
 * Retrieves a list of item references from a specific section. Each reference includes only the item's `_id`, `type`, and `order`, without full item details.<br/>
 * Accessible to:
 * - All users who are part of the course.
 */
export const itemControllerReadAll = <ThrowOnError extends boolean = false>(options: Options<ItemControllerReadAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ItemControllerReadAllResponses, ItemControllerReadAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items',
        ...options
    });
};

/**
 * Create an item
 * Creates a new item within a section.
 * Accessible to:
 * - Instructors, managers or teaching assistants of the course.
 */
export const itemControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ItemControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ItemControllerCreateResponses, ItemControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update an item
 * Updates the configuration or content of a specific item within a section.<br/>
 * Accessible to:
 * - Instructors, managers, and teaching assistants of the course.
 */
export const itemControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ItemControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ItemControllerUpdateResponses, ItemControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an item
 * Deletes a specific item from a section.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const itemControllerDelete = <ThrowOnError extends boolean = false>(options: Options<ItemControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ItemControllerDeleteResponses, ItemControllerDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/itemGroups/{itemsGroupId}/items/{itemId}',
        ...options
    });
};

/**
 * Reorder an item
 * Changes the position of an item within a section of a course version.<br/>
 * Accessible to:
 * - Instructors, managers, and teaching assistants of the course.
 */
export const itemControllerMove = <ThrowOnError extends boolean = false>(options: Options<ItemControllerMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ItemControllerMoveResponses, ItemControllerMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get an item by ID
 * Retrieves a specific item from a course version.<br/>
 * Access control logic:
 * - For students: The item is returned only if it matches the student's current item ID in their course progress.
 * - For instructors, managers, and teaching assistants: The item is accessible without this restriction.
 */
export const itemControllerGetItem = <ThrowOnError extends boolean = false>(options: Options<ItemControllerGetItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ItemControllerGetItemResponses, ItemControllerGetItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/{courseId}/versions/{versionId}/item/{itemId}',
        ...options
    });
};

/**
 * Create a module
 * Creates a new module within a specific course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const moduleControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ModuleControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ModuleControllerCreateResponses, ModuleControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a module
 * Deletes a module from a specific course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const moduleControllerDelete = <ThrowOnError extends boolean = false>(options: Options<ModuleControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ModuleControllerDeleteResponses, ModuleControllerDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}',
        ...options
    });
};

/**
 * Update a module
 * Updates the content or metadata of a module in a given course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const moduleControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ModuleControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ModuleControllerUpdateResponses, ModuleControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reorder a module
 * Changes the position of a module within the sequence of modules in the course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const moduleControllerMove = <ThrowOnError extends boolean = false>(options: Options<ModuleControllerMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ModuleControllerMoveResponses, ModuleControllerMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a section
 * Creates a new section within a module of a specific course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const sectionControllerCreate = <ThrowOnError extends boolean = false>(options: Options<SectionControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SectionControllerCreateResponses, SectionControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a section
 * Deletes a section from a module in a specific course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const sectionControllerDelete = <ThrowOnError extends boolean = false>(options: Options<SectionControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SectionControllerDeleteResponses, SectionControllerDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}',
        ...options
    });
};

/**
 * Update a section
 * Updates the title, description, or configuration of a section within a module of a specific course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const sectionControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<SectionControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SectionControllerUpdateResponses, SectionControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reorder a section
 * Changes the position of a section within its module in a specific course version.<br/>
 * Accessible to:
 * - Instructors or managers of the course.
 */
export const sectionControllerMove = <ThrowOnError extends boolean = false>(options: Options<SectionControllerMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SectionControllerMoveResponses, SectionControllerMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new question
 * Creates a new quiz question and returns its ID.
 */
export const questionControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<QuestionControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<QuestionControllerCreateResponses, QuestionControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/questions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a question
 * Deletes a quiz question by its ID.
 */
export const questionControllerDelete = <ThrowOnError extends boolean = false>(options: Options<QuestionControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<QuestionControllerDeleteResponses, QuestionControllerDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/questions/{questionId}',
        ...options
    });
};

/**
 * Get question by ID
 * Retrieves a quiz question by its ID.
 */
export const questionControllerGetById = <ThrowOnError extends boolean = false>(options: Options<QuestionControllerGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionControllerGetByIdResponses, QuestionControllerGetByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/questions/{questionId}',
        ...options
    });
};

/**
 * Update a question
 * Updates an existing quiz question.
 */
export const questionControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<QuestionControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<QuestionControllerUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/questions/{questionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Flag a question
 * Flags a quiz question for review with a reason.
 */
export const questionControllerFlagQuestion = <ThrowOnError extends boolean = false>(options: Options<QuestionControllerFlagQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuestionControllerFlagQuestionResponses, QuestionControllerFlagQuestionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/questions/{questionId}/flag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Resolve a flagged question
 * Resolves a flagged question by marking it as resolved or rejected.
 */
export const questionControllerResolveFlag = <ThrowOnError extends boolean = false>(options: Options<QuestionControllerResolveFlagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuestionControllerResolveFlagResponses, QuestionControllerResolveFlagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/questions/flags/{flagId}/resolve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all question banks for a quiz
 * Retrieves all question banks associated with a quiz.
 */
export const quizControllerGetAllQuestionBanks = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetAllQuestionBanksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetAllQuestionBanksResponses, QuizControllerGetAllQuestionBanksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/bank',
        ...options
    });
};

/**
 * Edit question bank configuration for a quiz
 * Updates the configuration of a question bank within a quiz.
 */
export const quizControllerEditQuestionBank = <ThrowOnError extends boolean = false>(options: Options<QuizControllerEditQuestionBankData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<QuizControllerEditQuestionBankResponses, QuizControllerEditQuestionBankErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/bank',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a question bank to a quiz
 * Associates a question bank with a quiz.
 */
export const quizControllerAddQuestionBank = <ThrowOnError extends boolean = false>(options: Options<QuizControllerAddQuestionBankData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuizControllerAddQuestionBankResponses, QuizControllerAddQuestionBankErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/bank',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a question bank from a quiz
 * Removes the association of a question bank from a quiz.
 */
export const quizControllerRemoveQuestionBank = <ThrowOnError extends boolean = false>(options: Options<QuizControllerRemoveQuestionBankData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<QuizControllerRemoveQuestionBankResponses, QuizControllerRemoveQuestionBankErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/bank/{questionBankId}',
        ...options
    });
};

/**
 * Get user metrics for a quiz
 * Retrieves quiz metrics for a specific user.
 */
export const quizControllerGetUserMetrices = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetUserMetricesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetUserMetricesResponses, QuizControllerGetUserMetricesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/user/{userId}',
        ...options
    });
};

/**
 * Get quiz attempt details
 * Retrieves details of a specific quiz attempt.
 */
export const quizControllerGetQuizAttempt = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetQuizAttemptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetQuizAttemptResponses, QuizControllerGetQuizAttemptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/attempts/{attemptId}',
        ...options
    });
};

/**
 * Get quiz submission details
 * Retrieves details of a specific quiz submission.
 */
export const quizControllerGetQuizSubmission = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetQuizSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetQuizSubmissionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/submissions/{submissionId}',
        ...options
    });
};

/**
 * Get all submissions for a quiz
 * Retrieves all submissions for a quiz.
 */
export const quizControllerGetAllSubmissions = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetAllSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetAllSubmissionsResponses, QuizControllerGetAllSubmissionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/submissions',
        ...options
    });
};

/**
 * Get quiz details
 * Retrieves details of a quiz.
 */
export const quizControllerGetQuizDetails = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetQuizDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetQuizDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/details',
        ...options
    });
};

/**
 * Get quiz analytics
 * Retrieves analytics data for a quiz.
 */
export const quizControllerGetQuizAnalytics = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetQuizAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetQuizAnalyticsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/analytics',
        ...options
    });
};

/**
 * Get quiz performance statistics
 * Retrieves performance statistics for each question in a quiz.
 */
export const quizControllerGetQuizPerformance = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetQuizPerformanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetQuizPerformanceResponses, QuizControllerGetQuizPerformanceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/performance',
        ...options
    });
};

/**
 * Get quiz results
 * Retrieves results for all students who attempted the quiz.
 */
export const quizControllerGetQuizResults = <ThrowOnError extends boolean = false>(options: Options<QuizControllerGetQuizResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuizControllerGetQuizResultsResponses, QuizControllerGetQuizResultsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/results',
        ...options
    });
};

/**
 * Override submission score
 * Overrides the score for a specific quiz submission.
 */
export const quizControllerUpdateQuizSubmissionScore = <ThrowOnError extends boolean = false>(options: Options<QuizControllerUpdateQuizSubmissionScoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuizControllerUpdateQuizSubmissionScoreResponses, QuizControllerUpdateQuizSubmissionScoreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/submission/{submissionId}/score/{score}',
        ...options
    });
};

/**
 * Regrade a quiz submission
 * Regrades a quiz submission with new grading results.
 */
export const quizControllerRegradeSubmission = <ThrowOnError extends boolean = false>(options: Options<QuizControllerRegradeSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuizControllerRegradeSubmissionResponses, QuizControllerRegradeSubmissionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/submission/{submissionId}/regrade',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add feedback to a question in a submission
 * Adds feedback to a specific question in a quiz submission.
 */
export const quizControllerAddFeedbackToQuestion = <ThrowOnError extends boolean = false>(options: Options<QuizControllerAddFeedbackToQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuizControllerAddFeedbackToQuestionResponses, QuizControllerAddFeedbackToQuestionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/submission/{submissionId}/question/{questionId}/feedback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset available attempts for a user on a quiz
 * Resets the number of available attempts for a user on a specific quiz.
 */
export const quizControllerResetAvailableAttempts = <ThrowOnError extends boolean = false>(options: Options<QuizControllerResetAvailableAttemptsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuizControllerResetAvailableAttemptsResponses, QuizControllerResetAvailableAttemptsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/quiz/{quizId}/user/{userId}/reset-attempts',
        ...options
    });
};

/**
 * Create a new question bank
 * Creates a new question bank for organizing quiz questions.
 */
export const questionBankControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<QuestionBankControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<QuestionBankControllerCreateResponses, QuestionBankControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/question-bank/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get question bank by ID
 * Retrieves a question bank and its details by its ID.
 */
export const questionBankControllerGetById = <ThrowOnError extends boolean = false>(options: Options<QuestionBankControllerGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionBankControllerGetByIdResponses, QuestionBankControllerGetByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/question-bank/{questionBankId}',
        ...options
    });
};

/**
 * Add a question to a question bank
 * Adds a question to the specified question bank.
 */
export const questionBankControllerAddQuestion = <ThrowOnError extends boolean = false>(options: Options<QuestionBankControllerAddQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<QuestionBankControllerAddQuestionResponses, QuestionBankControllerAddQuestionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/question-bank/{questionBankId}/questions/{questionId}/add',
        ...options
    });
};

/**
 * Remove a question from a question bank
 * Removes a question from the specified question bank.
 */
export const questionBankControllerRemoveQuestion = <ThrowOnError extends boolean = false>(options: Options<QuestionBankControllerRemoveQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<QuestionBankControllerRemoveQuestionResponses, QuestionBankControllerRemoveQuestionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/question-bank/{questionBankId}/questions/{questionId}/remove',
        ...options
    });
};

/**
 * Replace a question with its duplicate in a question bank
 * Duplicates a question and replaces the original in the question bank.
 */
export const questionBankControllerReplaceQuestion = <ThrowOnError extends boolean = false>(options: Options<QuestionBankControllerReplaceQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<QuestionBankControllerReplaceQuestionResponses, QuestionBankControllerReplaceQuestionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/question-bank/{questionBankId}/questions/{questionId}/replace-duplicate',
        ...options
    });
};

/**
 * Start a new quiz attempt
 * Creates a new attempt for the specified quiz for the current user.
 */
export const attemptControllerAttempt = <ThrowOnError extends boolean = false>(options: Options<AttemptControllerAttemptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttemptControllerAttemptResponses, AttemptControllerAttemptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/{quizId}/attempt',
        ...options
    });
};

/**
 * Save answers for an ongoing attempt
 * Saves the current answers for a quiz attempt without submitting.
 */
export const attemptControllerSave = <ThrowOnError extends boolean = false>(options: Options<AttemptControllerSaveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttemptControllerSaveResponses, AttemptControllerSaveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/{quizId}/attempt/{attemptId}/save',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit a quiz attempt
 * Submits the answers for a quiz attempt and returns the result.
 */
export const attemptControllerSubmit = <ThrowOnError extends boolean = false>(options: Options<AttemptControllerSubmitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttemptControllerSubmitResponses, AttemptControllerSubmitErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/{quizId}/attempt/{attemptId}/submit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get details of a quiz attempt
 * Retrieves the details of a specific quiz attempt for the current user.
 */
export const attemptControllerGetAttempt = <ThrowOnError extends boolean = false>(options: Options<AttemptControllerGetAttemptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AttemptControllerGetAttemptResponses, AttemptControllerGetAttemptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/quizzes/{quizId}/attempt/{attemptId}',
        ...options
    });
};

/**
 * Generate transcript
 */
export const genAiVideoControllerGenerateTranscript = <ThrowOnError extends boolean = false>(options?: Options<GenAiVideoControllerGenerateTranscriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenAiVideoControllerGenerateTranscriptResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/genai/generate/transcript',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Segment transcript
 */
export const genAiVideoControllerSegmentTranscript = <ThrowOnError extends boolean = false>(options?: Options<GenAiVideoControllerSegmentTranscriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenAiVideoControllerSegmentTranscriptResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/genai/generate/transcript/segment',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate questions
 */
export const genAiVideoControllerGenerateQuestions = <ThrowOnError extends boolean = false>(options?: Options<GenAiVideoControllerGenerateQuestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenAiVideoControllerGenerateQuestionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/genai/generate/questions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate course items from video
 */
export const genAiVideoControllerGenerateCourseItemsFromVideo = <ThrowOnError extends boolean = false>(options?: Options<GenAiVideoControllerGenerateCourseItemsFromVideoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenAiVideoControllerGenerateCourseItemsFromVideoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/genai/generate-course-items-from-video',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create
 */
export const courseSettingsControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<CourseSettingsControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CourseSettingsControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/courses/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get
 */
export const courseSettingsControllerGet = <ThrowOnError extends boolean = false>(options: Options<CourseSettingsControllerGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseSettingsControllerGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/courses/{courseId}/{versionId}',
        ...options
    });
};

/**
 * Update course settings
 */
export const courseSettingsControllerUpdateCourseSettings = <ThrowOnError extends boolean = false>(options: Options<CourseSettingsControllerUpdateCourseSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CourseSettingsControllerUpdateCourseSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/courses/{courseId}/{versionId}/proctoring',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create
 * Operations for managing user settings in courses
 */
export const userSettingsControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<UserSettingsControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserSettingsControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get
 * Operations for managing user settings in courses
 */
export const userSettingsControllerGet = <ThrowOnError extends boolean = false>(options: Options<UserSettingsControllerGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserSettingsControllerGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/users/{studentId}/{courseId}/{versionId}',
        ...options
    });
};

/**
 * Update user settings
 * Operations for managing user settings in courses
 */
export const userSettingsControllerUpdateUserSettings = <ThrowOnError extends boolean = false>(options: Options<UserSettingsControllerUpdateUserSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserSettingsControllerUpdateUserSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/users/{studentId}/{courseId}/{versionId}/proctoring',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};